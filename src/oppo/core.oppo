
(def global ('root oppo))
(def typeof ('to-type ('helpers oppo)))
(def eval ('eval oppo))


(defmacro (def-chained-operator)
  (def #{'local #yes} args (js::eval "oppo.helpers.get_options.apply(null, arguments)"))
  (def #{'local #yes} metadata (js::eval "args[0]"))
  (def #{'local #yes} name (js::eval "args[1]"))
  (def #{'local #yes} op (js::eval "args[2]"))
  (def #{'local #yes} joiner (js::eval "args[3]"))

  (let (unqt (lambda (x) `(unquote ,x))
        unqt-spl (lambda (x) `(unquote-splicing ,x)))
    `(defmacro ,metadata (,name ...args)
       (let (len ('length args))
         (if len
             (let (a (js::eval "args[0]"))
               (if (js::eval "len > 1")
                   (let (list* (lambda (...ls) ls)
                         a* (.compile-item oppo a)
                         b (.compile-item oppo (js::eval "args[1]"))
                         compiled (.join (list* "(" a* " " ,op " " b ")") "")
                         name ',name
                         joiner ',joiner
                         joiner (if joiner joiner name)
                         joiner-is-name (js::eval "name.text == joiner.text")
                         rest (if joiner-is-name
                                  (js::eval "args.slice(2)")
                                (js::eval "args.slice(1)"))
                         rest (if joiner-is-name
                                  rest
                                  (if (js::eval "rest.length > 1")
                                      (list* (.concat (list* name) rest))
                                      '())))
                     `(,(unqt 'joiner) (js::eval ,(unqt 'compiled)) ,(unqt-spl 'rest)))
                   a)))))))


(defmacro (apply fn args)
  `(.apply ,fn #nil ,args))


;; GENERAL ENVIRONMENT
(defmacro (require varname module)
  (let [mod (.toString (js::eval "(module || varname)"))
        var (js::eval "new oppo.Symbol(varname)")]
        `(def #{'local #yes} ,var ((js::eval "require") ,mod))))

(defmacro (new Class ...args)
  (let [list* (lambda (...ls) ls)
        new-Class (.compile-item oppo Class)
        new-Class (.join (list* "new" new-Class) " ")]
        `((js::eval ,new-Class) ,@args)))

(defmacro #{'runtime-function #(symbol #1)} (symbol x)
  `(new ('Symbol oppo) ,x))

(def ->oppo-string ('to-oppo-string ('helpers oppo)))
(def (->log-string x)
     (->oppo-string x #f))

(defmacro (puts ...args)
  `(.apply ('log console) console (map ->log-string #[,@args])))

(defmacro (puts-warning ...args)
  `(.apply ('warn console) console (map ->log-string #[,@args])))

(defmacro (puts-error ...args)
  `(.apply ('error console) console (map ->log-string #[,@args])))

(defmacro (cond ...body)
  (let (len ('length body)
        fst (js::eval "body[0]")
        snd (js::eval "body[1]")
        rest (js::eval "body.slice(2)"))
    (if (js::eval "len % 2 !== 0") (js::eval "!function () { throw oppo.CompileError('Cannot call cond with an odd number of arguments', this); }()"))
    (if len
        `(if ,fst ,snd (cond ,@rest)))))

(defmacro (use-from module ...items)
  (if ('length items)
      (let [item (js::eval "items[0]")
            rest (js::eval "items.slice(1)")
            list* (lambda (...ls) ls)
            module-item (symbol (.join (list* ('text module) "::" ('text item)) ""))]
            `(do (def #{'local #yes} ,item ,module-item)
                 (use-from ,module ,@rest)))))

(defmacro (use ...all-defs)
  (let [len ('length all-defs)]
       (if (js::eval "len % 2 !== 0") (js::eval "!function () { throw oppo.CompileError('Cannot call use with an odd number of arguments', this); }()"))
       (if len
           (let [module (js::eval "all_defs[0]")
                 items (js::eval "all_defs[1]")
                 rest (js::eval "all_defs.slice(2)")]
                 `(use-from ,module ,@items)))))


;; GENERIC COLLECTION METHODS
(def (empty? x)
     (let (type (typeof x))
       (cond
        (nil? x) #t
        (or (js::eval "type === 'array'")
            (js::eval "type === 'string'")) (js::eval "x.length === 0")
        (js::eval "type === 'object'") (empty? (keys x))
        (js::eval "type === 'number'") (js::eval "x === 0")
        'else #f)))

(def contains? (js::eval "function (c, v, deep) {
  if (deep == null)
    deep = true;
  var is_equal, type, v2;

  is_equal = oppo.helpers.is_equal;
  type = oppo.helpers.to_type(c);
  if (type === 'array' || type === 'string') {
    if (!deep && c.indexOf) {
      return c.indexOf(v) >= 0
    } else {
      for (var i = 0, len = c.length; i < len; i++) {
        v2 = c[i];
        if (deep) {
          if (is_equal(v, v2))
            return true;
        } else {
          if (v === v2)
            return true;
        }
      }
    }
  } else if (type === 'object') {
    for (var prop in c) {
      v2 = c[prop]
      if (deep) {
        if (is_equal(v, v2))
          return true;
      } else {
        if (v === v2)
          return true;
      }
    }
  }

  return false;
}"))

(def contains-key? (js::eval "function (coll, key) {
  var to_type = oppo.helpers.to_type;
  var type = to_type(coll);
  switch (type) {
    case 'array': case 'arguments': case 'string':
      return !isNaN(key) && key < coll.length;
    case 'object':
      return key in coll;
    default:
      return false;
  }
}"))





;; LISTS
(def (list ...ls) ls)
(def (->list x) (js::eval "Array.prototype.slice.call(x)"))

(def map ('map ('helpers oppo)))

(def reduce (js::eval "function reduce(fn, ls) {
  var len = ls.length;
  if (len < 2)
    throw new Error('Can\\'t reduce list with fewer than two items');
  var ret = ls[0];
  for (var i = 1; i < len; i++) {
    ret = fn(ret, ls[i]);
  }
  return ret;
}"))

(def reduce-right (js::eval "function reduce_right(fn, ls) {
  var len = ls.length;
  if (len < 2)
    throw new Error('Can\\'t reduce-right list with fewer than two items');
  var ret = ls[len - 1];
  for (var i = len - 2; i >= 0; i--) {
    ret = fn(ret, ls[i]);
  }
  return ret;
}"))

(def filter (js::eval "function filter(fn, ls) {
  var ret, i, len, item;
  ret = [];
  for (i = 0, len = ls.length; i < len; i++) {
    item = ls[i];
    if (fn(item))
      ret.push(item)
  }
  return ret;
}"))

(def concat ('concat ('helpers oppo)))
(def (first ls) (js::eval "ls[0]"))
(def (second ls) (js::eval "ls[1]"))
(def (third ls) (js::eval "ls[2]"))
(def (last ls) (js::eval "ls[ls.length - 1]"))
(def (slice ls start end)
     (if ('slice ls)
         (.slice ls start end)
         (.call ('slice ('prototype Array)) ls start end)))
(def (head ls) (slice ls 0 (- ('length ls) 1)))
(def (tail ls) (slice ls 1))

(def (nth ls n)
     (if (js::eval "n === 0")
         (do (puts-warning "nth treats lists as 1-based; accessing the 0th item will always yield #nil")
             #nil)
       (let (i (if (< n 0)
                   (+ ('length ls) n)
                   (- n 1)))
         (js::eval "ls[i]"))))


;; OBJECTS
(def object (js::eval "function () {
  var ret, i, len, key;
  ret = {};
  len = arguments.length;
  if (len % 2 !== 0)
    throw new Error('Object must have an even number of arguments (every key must have a value)');
  for (i = 0; i < len; i++) {
    if (i % 2 === 0)
      key = arguments[i];
    else
      ret[key] = arguments[i];
  }
  return ret;
}"))

(def (->object x) (Object x))

(let [-merge ('merge ('helpers oppo))]
     (def [merge ...objs]
          (apply -merge (concat #[#{}] objs))))

(def keys ('keys ('helpers oppo)))


;; STRINGS
(def (->string x) (String x))
(def (str ...strings) (.join strings ""))


;; NUMBERS
(def (->number x) (Number x))


;; BOOLEANS
(def (->boolean x) (Boolean x))





;; Math
(def-chained-operator #{'runtime-function #(reduce #(+ #1 #2) arguments)} + "+")
(def-chained-operator #{'runtime-function #(reduce #(- #1 #2) arguments)} - "-")
(def-chained-operator #{'runtime-function #(reduce #(* #1 #2) arguments)} * "*")
(def-chained-operator #{'runtime-function #(reduce #(/ #1 #2) arguments)} / "/")

(def (mod a b)
     (js::eval "a % b"))
(def pow ('pow Math))
(def abs ('abs Math))
(def (negate n)
     (js::eval "-n"))


;; LOGICAL
(defmacro (not x)
  (let (c-x (.compile-item oppo x)
        list* (lambda (...ls) ls)
        compiled (.join (list* "!" c-x) ""))
    `(js::eval ,compiled)))

(def-chained-operator or "||")
(def-chained-operator and "&&")


;; COMPARISON


(def-chained-operator
  #{'runtime-function #(if (> ('length arguments) 1)
                           (and (< #1 #2) (apply < (tail arguments)))
                         #yes)}
                         < "<" and)
(def-chained-operator
  #{'runtime-function #(if (> ('length arguments) 1)
                          (and (> #1 #2) (apply > (tail arguments)))
                        #yes)}
                        > ">" and)
(def-chained-operator
  #{'runtime-function #(if (> ('length arguments) 1)
                           (and (<= #1 #2) (apply <= (tail arguments)))
                         #yes)}
                         <= "<=" and)
(def-chained-operator
  #{'runtime-function #(if (> ('length arguments) 1)
                           (and (>= #1 #2) (apply >= (tail arguments)))
                         #yes)}
                         >= ">=" and)
(def-chained-operator
  #{'runtime-function #(if (> ('length arguments) 1)
                           (and (eq #1 #2) (apply eq (tail arguments)))
                         #yes)}
                         eq "===" and)
(def-chained-operator
  #{'runtime-function #(if (> ('length arguments) 1)
                           (and (not-eq #1 #2) (apply not-eq (tail arguments)))
                         #yes)}
                         not-eq "!==" and)
(def-chained-operator
  #{'runtime-function #(if (> ('length arguments) 1)
                           (and (eq~ #1 #2) (apply eq~ (tail arguments)))
                         #yes)}
                         eq~ "==" and)
(def-chained-operator
  #{'runtime-function #(if (> ('length arguments) 1)
                           (and (not-eq~ #1 #2) (apply not-eq~ (tail arguments)))
                         #yes)}
                         not-eq~ "!=" and)

(def = ('is-equal ('helpers oppo)))
(def (not=)
     (not (apply = (js::eval "arguments"))))


;; TYPE CHECKING METHODS

(defmacro #{'runtime-function #(number? #1)} (number? x)
  `(eq~ (js::typeof ,x) "number"))

(defmacro #{'runtime-function #(string? #1)} (string? x)
  `(eq~ (js::typeof ,x) "string"))

(defmacro #{'runtime-function #(array? #1)} (array? x)
  `(eq~ (typeof ,x) "array"))

(defmacro #{'runtime-function #(arguments? #1)} (arguments? x)
  `(eq~ (typeof ,x) "arguments"))

(def (list? x)
     (or (array? x)
         (arguments? x)))

(def (object? x)
  (and (not (nil? x))
       (eq~ (js::typeof x) "object")))

(defmacro #{'runtime-function #(nil? #1)} (nil? x)
  `(eq~ ,x #nil))

(defmacro #{'runtime-function #(function? #1)} (function? x)
  `(eq~ (typeof ,x) "function"))

(defmacro #{'runtime-function #(regex? #1)} (regex? x)
  `(eq~ (typeof ,x) "regexp"))

(defmacro #{'runtime-function #(date? #1)} (date? x)
  `(eq~ (typeof ,x) "date"))

(def (isNaN? x)
     (not-eq~ x x))


;; INCLUDES GO LAST
(include test)
