
(def typeof ((quote to-type) oppo))

(def map (js::eval "function (fn, ls) {
  var ret = [];
  for (var i = 0, len = ls.length; i < len; i++) {
    var item = ls[i];
    ret.push(fn(item));
  }
  return ret;
}"))

(def reduce (js::eval "function (fn, ls) {
  var ret = ls[0];
  for (var i = 1, len = ls.length; i < len; i++) {
    ret = fn(ret, ls[i]);
  }
  return ret;
}"))

(def filter (js::eval "function (fn, ls) {
  var ret, i, len, item;
  ret = [];
  for (i = 0, len = ls.length; i < len; i++) {
    item = ls[i];
    if (fn(item))
      ret.push(item)
  }
  return ret;
}"))

(def (->object x) (Object x))
(def (->string x) (String x))
(def (->number x) (Number x))
(def (->boolean x) (Boolean x))

(def (str ...strings) (.join strings ""))

(def (list ...ls) ls)
(def object (js::eval "function () {
  var ret, i, len, key;
  ret = {};
  len = arguments.length;
  if (len % 2 !== 0)
    throw new Error('Object must have an even number of arguments (every key must have a value)');
  for (i = 0; i < len; i++) {
    if (i % 2 === 0)
      key = arguments[i];
    else
      ret[key] = arguments[i];
  }
  return ret;
}"))
