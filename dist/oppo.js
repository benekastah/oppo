// Generated by CoffeeScript 1.3.3
(function() {
  var C, L, core, name, op, postfix_ops, prefix_ops, regular_ops, root, _fn, _fn1, _fn2, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  root = typeof global !== "undefined" && global !== null ? global : window;

  root.root = root;

  L = {};

  root.lemur = L;

  core = L.core = {};

  (function() {
    var toString;
    toString = Object.prototype.toString;
    return core.to_type = function(o) {
      var s;
      s = toString.call(o);
      s = s.substring(8, s.length - 1);
      return s.toLowerCase();
    };
  })();

  core.s_trim = (_ref = String.prototype.trim) != null ? _ref : function() {
    return String(this).replace(/^\s+/, '').replace(/\s+$/, '');
  };

  (function() {
    var Noop, _ref1;
    Noop = function() {};
    return core.clone = (_ref1 = Object.create) != null ? _ref1 : function(o) {
      Noop.prototype = o;
      return new Noop();
    };
  })();

  if ((typeof exports !== "undefined" && exports !== null) && (typeof module !== "undefined" && module !== null)) {

  } else if (typeof provide !== "undefined" && provide !== null) {
    provide("lemur", L);
  }

  L = lemur;

  C = L.Compiler = (function() {

    function Compiler(config) {
      var _ref1;
      if (config == null) {
        config = {};
      }
      this.predefined = config.predefined, this.parent_context = config.parent_context, this.include_directory = config.include_directory;
      this.cached_includes = {};
      C.current_context = this;
      this.scope_stack = ((_ref1 = this.parent_context) != null ? _ref1.scope_stack.slice() : void 0) || [];
      this.new_scope();
      this.global_scope = this.current_scope();
    }

    Compiler.prototype.new_scope = function() {
      return this.push_scope(new C.Scope({
        push_to_current: false
      }));
    };

    Compiler.prototype.push_scope = function(scope) {
      this.scope_stack.push(scope);
      return scope;
    };

    Compiler.prototype.pop_scope = function() {
      return this.scope_stack.pop();
    };

    Compiler.prototype.current_scope = function() {
      return this.scope_stack[this.scope_stack.length - 1];
    };

    Compiler.prototype.find_scope_with_var = function(_var) {
      var scope, _i, _len, _ref1;
      _ref1 = this.scope_stack.slice().reverse();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        scope = _ref1[_i];
        if (scope.var_defined(_var)) {
          return scope;
        }
      }
      return null;
    };

    Compiler.prototype.get_var_val = function(_var) {
      var scope;
      scope = this.find_scope_with_var(_var);
      if (scope != null) {
        return scope.get_val(_var);
      }
    };

    Compiler.prototype.set_var_val = function(_var, val) {
      var scope;
      scope = this.find_scope_with_var(_var);
      if (scope != null) {
        return scope.set_var(_var, val);
      } else {
        return _var.error_cant_set();
      }
    };

    Compiler.prototype.compile = function(fn) {
      return fn.call(this);
    };

    Compiler.current_scope = function() {
      return this.current_context.current_scope();
    };

    Compiler.push_scope = function() {
      var _ref1;
      return (_ref1 = this.current_context).push_scope.apply(_ref1, arguments);
    };

    Compiler.pop_scope = function() {
      return this.current_context.pop_scope();
    };

    Compiler.new_scope = function() {
      var _ref1;
      return (_ref1 = this.current_context).new_scope.apply(_ref1, arguments);
    };

    Compiler.find_scope_with_var = function() {
      var _ref1;
      return (_ref1 = this.current_context).find_scope_with_var.apply(_ref1, arguments);
    };

    Compiler.get_var_val = function() {
      var _ref1;
      return (_ref1 = this.current_context).get_var_val.apply(_ref1, arguments);
    };

    Compiler.set_var_val = function() {
      var _ref1;
      return (_ref1 = this.current_context).set_var_val.apply(_ref1, arguments);
    };

    return Compiler;

  })();

  C.Construct = (function() {
    var Noop;

    function Construct(value, yy_or_node_or_num) {
      var _ref1, _ref2;
      this.value = value;
      if (yy_or_node_or_num instanceof Construct) {
        this.transfer_node = yy_or_node_or_num;
        this.yy = yy_or_node_or_num.yy;
      } else if ((L.core.to_type(yy_or_node_or_num)) === "number") {
        this.yy = {
          lexer: {
            yylineno: yy_or_node_or_num
          }
        };
      } else {
        this.yy = yy_or_node_or_num;
      }
      this.line_number = (_ref1 = this.yy) != null ? (_ref2 = _ref1.lexer) != null ? _ref2.yylineno : void 0 : void 0;
    }

    Construct.prototype.compile = function() {
      if (this.value != null) {
        return "" + this.value;
      } else {
        return "null";
      }
    };

    Construct.prototype._compile = function() {
      return this.compile.apply(this, arguments);
    };

    Construct.prototype.toString = function() {
      var _ref1;
      if (((_ref1 = this.value) != null ? _ref1.toString : void 0) != null) {
        return this.value.toString();
      } else {
        return "" + this.value;
      }
    };

    Construct.prototype.valueOf = function() {
      return this.value;
    };

    Construct.prototype.error = function(message) {
      var filename, location, type;
      filename = C.current_filename;
      location = "";
      type = "";
      if (filename != null) {
        location += " in " + filename;
      }
      if (this.line_number != null) {
        location += " at line " + this.line_number;
      }
      if (this.constructor.name != null) {
        type = "" + this.constructor.name;
      }
      throw "" + type + "Error" + location + ": " + message;
    };

    Construct.prototype.should_return = function() {
      return new C.ReturnedConstruct(this, this.yy);
    };

    Construct.prototype.Noop = Noop = (function() {

      function Noop(c) {
        this.constructor = c;
      }

      return Noop;

    })();

    Construct.prototype.clone = function() {
      var Class, cl, np, p, prop, val, _ref1;
      Class = this.constructor;
      p = Class.prototype;
      np = this.Noop.prototype;
      this.Noop.prototype = p;
      cl = new Noop(Class);
      this.Noop.prototype = np;
      for (prop in this) {
        if (!__hasProp.call(this, prop)) continue;
        val = this[prop];
        val = (_ref1 = val != null ? typeof val.clone === "function" ? val.clone() : void 0 : void 0) != null ? _ref1 : val;
        cl[prop] = val;
      }
      return cl;
    };

    return Construct;

  })();

  C.ReturnedConstruct = (function(_super) {

    __extends(ReturnedConstruct, _super);

    function ReturnedConstruct() {
      return ReturnedConstruct.__super__.constructor.apply(this, arguments);
    }

    ReturnedConstruct.prototype.compile = function() {
      var c_value;
      c_value = this.value._compile();
      if (!this.disabled) {
        return "return " + c_value;
      } else {
        return c_value;
      }
    };

    ReturnedConstruct.prototype.tail_node = function(node) {
      if (!(node != null)) {
        return this;
      } else {
        if (node instanceof C.ReturnedConstruct) {
          node = node.value;
        }
        this.value = node;
        return node.returnedConstruct = this;
      }
    };

    ReturnedConstruct.prototype.should_return = function() {
      return this;
    };

    return ReturnedConstruct;

  })(C.Construct);

  C.Array = (function(_super) {

    __extends(Array, _super);

    function Array(items) {
      this.items = items;
      Array.__super__.constructor.apply(this, arguments);
    }

    Array.prototype.compile = function() {
      var c_items, item;
      c_items = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.items;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item._compile());
        }
        return _results;
      }).call(this);
      return "[" + (c_items.join(', ')) + "]";
    };

    return Array;

  })(C.Construct);

  C.Atom = (function(_super) {

    __extends(Atom, _super);

    function Atom(y, yy) {
      Atom.__super__.constructor.call(this, null, y || yy);
    }

    return Atom;

  })(C.Construct);

  C.Null = (function(_super) {

    __extends(Null, _super);

    function Null() {
      return Null.__super__.constructor.apply(this, arguments);
    }

    Null.prototype.compile = function() {
      return "null";
    };

    return Null;

  })(C.Atom);

  C.Undefined = (function(_super) {

    __extends(Undefined, _super);

    function Undefined() {
      return Undefined.__super__.constructor.apply(this, arguments);
    }

    Undefined.prototype.compile = function() {
      return "void(0)";
    };

    return Undefined;

  })(C.Atom);

  C.Boolean = (function(_super) {

    __extends(Boolean, _super);

    function Boolean() {
      return Boolean.__super__.constructor.apply(this, arguments);
    }

    return Boolean;

  })(C.Atom);

  C.True = (function(_super) {

    __extends(True, _super);

    function True() {
      return True.__super__.constructor.apply(this, arguments);
    }

    True.prototype.compile = function() {
      return "true";
    };

    return True;

  })(C.Boolean);

  C.False = (function(_super) {

    __extends(False, _super);

    function False() {
      return False.__super__.constructor.apply(this, arguments);
    }

    False.prototype.compile = function() {
      return "false";
    };

    return False;

  })(C.Boolean);

  C.This = (function(_super) {

    __extends(This, _super);

    function This() {
      return This.__super__.constructor.apply(this, arguments);
    }

    This.prototype.compile = function() {
      return "this";
    };

    return This;

  })(C.Construct);

  C.Class = (function(_super) {

    __extends(Class, _super);

    Class.prototype.anon_id = 0;

    function Class(config, yy) {
      var constructor, _ref1, _ref2, _ref3;
      if (config == null) {
        config = {};
      }
      Class.__super__.constructor.apply(this, arguments);
      if (!config.hasOwnProperty('constructor')) {
        config.constructor = null;
      }
      this.name = config.name, constructor = config.constructor, this.prototype = config.prototype, this.statics = config.statics;
      if ((_ref1 = this.name) == null) {
        this.name = new C.String("Anonymous_$" + (id++) + "_");
      }
      this.class_constructor = constructor != null ? constructor : new C.Function({}, yy);
      if ((_ref2 = this.prototype) == null) {
        this.prototype = new C.Object([], yy);
      }
      if ((_ref3 = this.statics) == null) {
        this.statics = new C.Object([], yy);
      }
      this.class_constructor.name = this.name;
    }

    Class.prototype.object_compile = function(prefix, obj) {
      var pairs, prop, val;
      pairs = (function() {
        var _i, _len, _ref1, _ref2, _results;
        _ref1 = obj.property_value_pairs;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          _ref2 = _ref1[_i], prop = _ref2[0], val = _ref2[1];
          _results.push("" + prefix + "." + (prop._compile()) + " = " + (val._compile()));
        }
        return _results;
      })();
      return pairs.join(';\n  ');
    };

    Class.prototype.compile = function() {
      var proto, statics;
      statics = object_compile(this.name, this.statics);
      proto = object_compile("" + this.name + ".prototype", this.prototype);
      return "" + this.name + " = (function () {\n  " + (this.class_constructor._compile()) + ";\n  " + statics + ";\n  " + proto + ";\n  return " + this.name + ";\n})()";
    };

    return Class;

  })(C.Construct);

  C.CodeFragment = (function(_super) {

    __extends(CodeFragment, _super);

    function CodeFragment(statements) {
      this.statements = statements;
      CodeFragment.__super__.constructor.apply(this, arguments);
    }

    CodeFragment.prototype.compile = function() {
      var c_statements, stmt;
      c_statements = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.statements;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          stmt = _ref1[_i];
          _results.push(stmt._compile());
        }
        return _results;
      }).call(this);
      return "" + (c_statements.join(';\n'));
    };

    return CodeFragment;

  })(C.Construct);

  C.CommaGroup = (function(_super) {

    __extends(CommaGroup, _super);

    function CommaGroup(items) {
      this.items = items;
      CommaGroup.__super__.constructor.apply(this, arguments);
    }

    CommaGroup.prototype.compile = function() {
      var c_items, item;
      c_items = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.items;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item._compile());
        }
        return _results;
      }).call(this);
      return "(" + (c_items.join(', ')) + ")";
    };

    return CommaGroup;

  })(C.Construct);

  C.Function = (function(_super) {

    __extends(Function, _super);

    function Function(_arg, yy) {
      var _ref1, _ref2, _ref3;
      this.name = _arg.name, this.args = _arg.args, this.body = _arg.body, this.autoreturn = _arg.autoreturn;
      if ((_ref1 = this.name) == null) {
        this.name = '';
      }
      if ((_ref2 = this.args) == null) {
        this.args = [];
      }
      if ((_ref3 = this.body) == null) {
        this.body = [];
      }
      if (!(this.args instanceof C.Function.ArgsList)) {
        this.args = new C.Function.ArgsList(this.args, yy);
      }
      Function.__super__.constructor.apply(this, arguments);
      if (this.args instanceof C.Array) {
        this.args = this.args.items;
      }
    }

    Function.prototype.compile = function() {
      var add_to_body, arg, arg_redefs, args, body, c_args, c_body, c_name, fake_arg, fake_arg_defs, fake_args, fake_fn_call, fn, i, last_arg, rest, result, ret, scope, set_continue, stmt, sym_continue, sym_fn, sym_result, tail_recursive, to_return, to_return_context, var_stmt, _continuef, _continuet, _i, _len, _ref1, _ref2, _ref3, _while;
      scope = new C.Scope();
      _ref1 = this.will_autoreturn(), to_return = _ref1.to_return, to_return_context = _ref1.to_return_context;
      tail_recursive = this.autoreturn && to_return.value instanceof C.FunctionCall && to_return.value.fn instanceof C.Symbol && to_return.value.fn.name === this.name.name;
      _ref2 = this.args._compile(), args = _ref2[0], add_to_body = _ref2[1], rest = _ref2[2];
      body = this.body;
      if (tail_recursive) {
        sym_continue = C.Var.gensym("continue");
        set_continue = new C.Var.Set({
          _var: sym_continue,
          value: new C.Null()
        });
        fake_args = {};
        fake_arg_defs = [];
        arg_redefs = [];
        last_arg = this.args.length - 1;
        _ref3 = this.args.args;
        for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
          arg = _ref3[i];
          if (rest && i === last_arg) {
            arg = rest;
          }
          fake_arg = fake_args[arg.name] = C.Var.gensym(arg);
          fake_arg_defs.push(new C.Var.Set({
            _var: fake_arg,
            value: to_return.value.args[i]
          }));
          arg_redefs.push(new C.Var.Set({
            _var: arg,
            value: fake_arg,
            must_exist: false
          }));
        }
        _continuet = new C.Var.Set({
          _var: sym_continue,
          value: new C.True()
        });
        _continuef = new C.Var.Set({
          _var: sym_continue,
          value: new C.False()
        });
        fake_fn_call = new C.CommaGroup(__slice.call(fake_arg_defs).concat(__slice.call(arg_redefs), [_continuet]));
        body.unshift(_continuef);
        to_return.return_disabled = true;
        to_return_context.tail_node(fake_fn_call);
        fake_fn_call.returnedConstruct.disabled = true;
        sym_result = C.Var.gensym("result");
        sym_fn = C.Var.gensym("fn");
        fn = new C.Var.Set({
          _var: sym_fn,
          value: new C.Function({
            body: body
          })
        });
        result = new C.Var.Set({
          _var: sym_result,
          value: new C.FunctionCall({
            fn: sym_fn,
            scope: new C.This()
          })
        });
        ret = new C.If({
          condition: new C.Not(sym_continue),
          then: new C.ReturnedConstruct(sym_result)
        });
        _while = new C.WhileLoop({
          condition: new C.True(),
          body: [result, ret]
        });
        body = [set_continue, fn, _while];
      }
      c_name = L.core.to_type(this.name) === "string" ? this.name : this.name._compile();
      c_args = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
          arg = args[_j];
          _results.push(arg._compile());
        }
        return _results;
      })();
      c_body = (function() {
        var _j, _len1, _results;
        _results = [];
        for (i = _j = 0, _len1 = body.length; _j < _len1; i = ++_j) {
          stmt = body[i];
          _results.push(stmt._compile());
        }
        return _results;
      })();
      c_body = "" + (c_body.join(';\n  ')) + ";";
      c_body = add_to_body != null ? "" + (add_to_body._compile()) + ";\n  " + c_body : c_body;
      var_stmt = scope.var_stmt();
      C.pop_scope();
      return "function " + c_name + "(" + (c_args.join(", ")) + ") {\n  " + var_stmt + c_body + "\n}";
    };

    Function.prototype.will_autoreturn = function() {
      var ret, to_return;
      if (this.autoreturn && this.body.length) {
        to_return = this.body.pop();
        to_return = to_return.should_return();
        this.body.push(to_return);
        ret = {
          to_return: to_return.tail_node(),
          to_return_context: to_return
        };
      }
      return ret || new C.Null();
    };

    return Function;

  })(C.Construct);

  C.Function.ArgsList = (function(_super) {

    __extends(ArgsList, _super);

    ArgsList.prototype.slice_fn = "Array.prototype.slice.call";

    function ArgsList(args) {
      this.args = args;
      ArgsList.__super__.constructor.apply(this, arguments);
    }

    ArgsList.prototype.compile = function() {
      var add_to_body, args, c_rest, rest, _base, _ref1;
      args = (typeof (_base = this.args).slice === "function" ? _base.slice() : void 0) || ((_ref1 = this.args.items) != null ? _ref1.slice() : void 0);
      if (args.length) {
        rest = args.pop();
        if (!(rest instanceof C.Rest)) {
          args.push(rest);
          rest = null;
        } else {
          rest = rest.sym;
        }
        if (rest != null) {
          rest = new C.Var(rest, rest.yy);
          c_rest = rest._compile();
          add_to_body = new C.Raw("" + c_rest + " = " + this.slice_fn + "(arguments, " + args.length + ")");
        }
      }
      return [args, add_to_body, rest];
    };

    return ArgsList;

  })(C.Construct);

  C.FunctionCall = (function(_super) {

    __extends(FunctionCall, _super);

    function FunctionCall(_arg, yy) {
      var _ref1;
      this.fn = _arg.fn, this.args = _arg.args, this.scope = _arg.scope, this.apply = _arg.apply, this.instantiate = _arg.instantiate;
      this.call = !!this.scope;
      if ((_ref1 = this.scope) == null) {
        this.scope = new C.Null(null, yy);
      }
      this.args || (this.args = []);
    }

    FunctionCall.prototype.compile = function() {
      var arg, args, c_args, c_fn, instantiate;
      c_fn = this.fn._compile();
      if (!(this.fn instanceof C.Symbol)) {
        c_fn = "(" + c_fn + ")";
      }
      if (this.apply || this.call) {
        args = [this.scope].concat(this.args);
      } else {
        args = this.args;
      }
      c_args = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(arg._compile());
        }
        return _results;
      })();
      instantiate = this.instantiate ? "new " : "";
      return "" + instantiate + c_fn + (this.apply ? '.apply' : this.call ? '.call' : '') + "(" + (c_args.join(', ')) + ")";
    };

    return FunctionCall;

  })(C.Construct);

  C.If = (function(_super) {

    __extends(If, _super);

    function If(_arg) {
      this.condition = _arg.condition, this.then = _arg.then, this._else = _arg._else;
      If.__super__.constructor.apply(this, arguments);
    }

    If.prototype.compile = function() {
      var c_cond, c_else, c_then, ret;
      c_cond = this.condition._compile();
      c_then = this.then._compile();
      ret = "if (" + c_cond + ") {\n  " + c_then + "\n}";
      if (this._else) {
        c_else = this._else._compile();
        ret = "" + ret + " else {\n  " + c_else + "\n}";
      }
      return ret;
    };

    If.prototype.should_return = function() {
      this.then = this.then.should_return();
      if (this._else) {
        this._else = this._else.should_return();
      }
      return this;
    };

    If.prototype.tail_node = function() {
      var _ref1, _ref2;
      if (this._else != null) {
        return (_ref1 = this._else).tail_node.apply(_ref1, arguments);
      } else {
        return (_ref2 = this.then).tail_node.apply(_ref2, arguments);
      }
    };

    return If;

  })(C.Construct);

  C.IfTernary = (function(_super) {

    __extends(IfTernary, _super);

    function IfTernary(_arg, yy) {
      var _ref1;
      this._else = _arg._else;
      IfTernary.__super__.constructor.apply(this, arguments);
      if ((_ref1 = this._else) == null) {
        this._else = new C.Null(yy);
      }
    }

    IfTernary.prototype.compile = function() {
      var c_cond, c_else, c_then;
      c_cond = this.condition._compile();
      c_then = this.then._compile();
      c_else = this._else._compile();
      return "(" + c_cond + " ? " + c_then + " : " + c_else + ")";
    };

    IfTernary.prototype.should_return = function() {
      var ret, _ref1,
        _this = this;
      IfTernary.__super__.should_return.apply(this, arguments);
      this.then.disabled = true;
      if ((_ref1 = this._else) != null) {
        _ref1.disabled = true;
      }
      ret = new C.ReturnedConstruct(this);
      ret.tail_node = function() {
        return _this.tail_node.apply(_this, arguments);
      };
      return ret;
    };

    return IfTernary;

  })(C.If);

  C.Loop = (function(_super) {

    __extends(Loop, _super);

    function Loop() {
      return Loop.__super__.constructor.apply(this, arguments);
    }

    Loop.BREAK = {
      compile: function() {
        return "break";
      }
    };

    Loop.CONTINUE = {
      compile: function() {
        return "continue";
      }
    };

    return Loop;

  })(C.Construct);

  C.ForLoop = (function(_super) {

    __extends(ForLoop, _super);

    function ForLoop(_arg) {
      var condition;
      condition = _arg.condition, this.body = _arg.body;
      this.a = condition[0], this.b = condition[1], this.c = condition[2];
      ForLoop.__super__.constructor.apply(this, arguments);
    }

    ForLoop.prototype.compile = function() {
      var c_a, c_b, c_body, c_c, item;
      c_a = this.a._compile();
      c_b = this.b._compile();
      c_c = this.c._compile();
      c_body = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.body;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item._compile());
        }
        return _results;
      }).call(this);
      return "for (" + c_a + "; " + c_b + "; " + c_c + ") {\n	" + (c_body.join(';\n  ')) + ";\n}";
    };

    return ForLoop;

  })(C.Loop);

  C.ForEachLoop = (function(_super) {

    __extends(ForEachLoop, _super);

    function ForEachLoop(_arg, yy) {
      var a, b, c, i, len, vlen;
      this.collection = _arg.collection, this.body = _arg.body;
      i = C.Var.gensym("i", yy);
      vlen = C.Var.gensym("len", yy);
      len = new C.PropertyAccess([this.collection, C.Symbol("length")]);
      a = new C.Comma(C.Var.Set({
        "var": i,
        value: C.Number(0, yy)
      }), C.Var.Set({
        "var": vlen,
        value: len
      }));
      b = new C.LT([i, len]);
      c = new C.PostIncr(i);
      ForEachLoop.__super__.constructor.call(this, [a, b, c], yy);
    }

    return ForEachLoop;

  })(C.ForLoop);

  C.ForInLoop = (function(_super) {

    __extends(ForInLoop, _super);

    function ForInLoop(_arg) {
      this.property = _arg.property, this.object = _arg.object, this.body = _arg.body;
      ForInLoop.__super__.constructor.apply(this, arguments);
    }

    ForInLoop.prototype.compile = function() {
      var c_body, c_object, c_property, item;
      c_property = this.property._compile();
      c_object = this.object._compile();
      c_body = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.body;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item._compile());
        }
        return _results;
      }).call(this);
      return "for (" + c_property + " in " + c_object + ") {\n  " + (c_body.join(';\n  ')) + ";\n}";
    };

    return ForInLoop;

  })(C.Loop);

  C.WhileLoop = (function(_super) {

    __extends(WhileLoop, _super);

    function WhileLoop(_arg) {
      this.condition = _arg.condition, this.body = _arg.body;
      WhileLoop.__super__.constructor.apply(this, arguments);
    }

    WhileLoop.prototype.compile = function() {
      var c_body, c_condition, item;
      c_condition = this.condition._compile();
      c_body = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.body;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item._compile());
        }
        return _results;
      }).call(this);
      return "while (" + c_condition + ") {\n  " + (c_body.join(';\n  ')) + ";\n}";
    };

    return WhileLoop;

  })(C.Loop);

  C.DoWhileLoop = (function(_super) {

    __extends(DoWhileLoop, _super);

    function DoWhileLoop(_arg) {
      this.condition = _arg.condition, this.body = _arg.body;
      DoWhileLoop.__super__.constructor.apply(this, arguments);
    }

    DoWhileLoop.prototype.compile = function() {
      var c_body, c_condition, item;
      c_condition = this.condition._compile();
      c_body = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.body;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item._compile());
        }
        return _results;
      }).call(this);
      return "do {\n  " + (c_body.join(';\n  ')) + ";\n} while (" + c_condition + ")";
    };

    return DoWhileLoop;

  })(C.Loop);

  C.Number = (function(_super) {

    __extends(Number, _super);

    function Number(n) {
      var base, o, value;
      Number.__super__.constructor.apply(this, arguments);
      if ((L.core.to_type(n)) === "object") {
        o = n;
        value = o.value, base = o.base;
        if (base) {
          n = parseInt(value, base);
        } else {
          n = value;
        }
      }
      this.value = +n;
    }

    Number.prototype.compile = function() {
      return "" + this.value;
    };

    return Number;

  })(C.Construct);

  C.Object = (function(_super) {

    __extends(Object, _super);

    function Object(pairs) {
      var pair;
      if (pairs == null) {
        pairs = [];
      }
      Object.__super__.constructor.apply(this, arguments);
      this.property_value_pairs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = pairs.length; _i < _len; _i++) {
          pair = pairs[_i];
          if (pair instanceof C.List) {
            pair.quoted = true;
          }
          _results.push(eval(pair._compile()));
        }
        return _results;
      })();
    }

    Object.prototype.compile = function() {
      var pairs, prop, val;
      pairs = (function() {
        var _i, _len, _ref1, _ref2, _results;
        _ref1 = this.property_value_pairs;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          _ref2 = _ref1[_i], prop = _ref2[0], val = _ref2[1];
          _results.push("" + (prop._compile()) + ": " + (val._compile()));
        }
        return _results;
      }).call(this);
      return "{ " + (pairs.join(',\n  ')) + " }";
    };

    return Object;

  })(C.Construct);

  C.ProperyAccess = (function(_super) {

    __extends(ProperyAccess, _super);

    function ProperyAccess(_arg) {
      this.obj = _arg[0], this.props = 2 <= _arg.length ? __slice.call(_arg, 1) : [];
      ProperyAccess.__super__.constructor.apply(this, arguments);
    }

    ProperyAccess.prototype.compile = function() {
      var base, c_prop, prop, _i, _len, _ref1, _results;
      base = this.obj._compile();
      _ref1 = this.props;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        prop = _ref1[_i];
        c_prop = prop._compile();
        if (prop instanceof C.Var) {
          _results.push(base = "" + base + "." + c_prop);
        } else {
          _results.push(base = "" + base + "[" + c_prop + "]");
        }
      }
      return _results;
    };

    return ProperyAccess;

  })(C.Construct);

  C.Operation = (function(_super) {

    __extends(Operation, _super);

    function Operation(_arg) {
      this.x = _arg[0], this.op = _arg[1], this.y = _arg[2];
      Operation.__super__.constructor.apply(this, arguments);
    }

    Operation.prototype.compile = function() {
      var c_x, c_y;
      c_x = this.x._compile();
      c_y = this.y._compile();
      return "" + c_x + " " + this.op + " " + c_y;
    };

    return Operation;

  })(C.Construct);

  C.PrefixOperation = (function(_super) {

    __extends(PrefixOperation, _super);

    function PrefixOperation(_arg) {
      this.x = _arg[0], this.op = _arg[1];
      PrefixOperation.__super__.constructor.apply(this, arguments);
    }

    PrefixOperation.prototype.compile = function() {
      var c_x;
      c_x = this.x._compile();
      return "" + this.op + c_x;
    };

    return PrefixOperation;

  })(C.Operation);

  C.PostfixOperation = (function(_super) {

    __extends(PostfixOperation, _super);

    function PostfixOperation(_arg) {
      this.x = _arg[0], this.op = _arg[1];
      PostfixOperation.__super__.constructor.apply(this, arguments);
    }

    PostfixOperation.prototype.compile = function() {
      var c_x;
      c_x = this.x._compile();
      return "" + c_x + this.op;
    };

    return PostfixOperation;

  })(C.Operation);

  regular_ops = {
    Add: "+",
    Subtract: "-",
    Multiply: "*",
    Divide: "/",
    Mod: "%",
    GT: ">",
    LT: "<",
    GTE: ">=",
    LTE: "<=",
    Eq3: "===",
    Eq2: "==",
    NotEq3: "!==",
    NotEq2: "!=",
    And: "&&",
    Or: "||",
    BAnd: "&",
    BOr: "|",
    BXor: "^",
    BLeftShift: "<<",
    BRightShift: ">>",
    BZeroFillRightShift: ">>>",
    Comma: ","
  };

  prefix_ops = {
    Not: "!",
    BNot: "~",
    PreIncr: "++",
    PreDecr: "--",
    Delete: "delete "
  };

  postfix_ops = {
    PostIncr: "++",
    PostDecr: "--"
  };

  _fn = function(name, op) {
    return C[name] = (function(_super) {

      __extends(_Class, _super);

      function _Class(_arg, yy) {
        var x, y;
        x = _arg[0], y = _arg[1];
        _Class.__super__.constructor.call(this, [x, op, y], yy);
      }

      return _Class;

    })(C.Operation);
  };
  for (name in regular_ops) {
    if (!__hasProp.call(regular_ops, name)) continue;
    op = regular_ops[name];
    _fn(name, op);
  }

  _fn1 = function(name, op) {
    return C[name] = (function(_super) {

      __extends(_Class, _super);

      function _Class(x, yy) {
        _Class.__super__.constructor.call(this, [x, op], yy);
      }

      return _Class;

    })(C.PrefixOperation);
  };
  for (name in prefix_ops) {
    if (!__hasProp.call(prefix_ops, name)) continue;
    op = prefix_ops[name];
    _fn1(name, op);
  }

  _fn2 = function(name, op) {
    return C[name] = (function(_super) {

      __extends(_Class, _super);

      function _Class(x, yy) {
        _Class.__super__.constructor.call(this, [x, op], yy);
      }

      return _Class;

    })(C.PostfixOperation);
  };
  for (name in postfix_ops) {
    if (!__hasProp.call(postfix_ops, name)) continue;
    op = postfix_ops[name];
    _fn2(name, op);
  }

  C.Raw = (function(_super) {

    __extends(Raw, _super);

    function Raw(text) {
      this.text = text;
      Raw.__super__.constructor.apply(this, arguments);
    }

    Raw.prototype.compile = function() {
      return this.text;
    };

    return Raw;

  })(C.Construct);

  C.Regex = (function(_super) {

    __extends(Regex, _super);

    function Regex(_arg) {
      this.pattern = _arg.pattern, this.modifiers = _arg.modifiers;
      Regex.__super__.constructor.apply(this, arguments);
      if ((core.to_type(this.pattern)) === "string") {
        this.pattern = new C.String(this.pattern, this.yy);
      }
      if ((core.to_type(this.modifiers)) === "string") {
        this.modifiers = new C.String(this.modifiers, this.yy);
      }
    }

    Regex.prototype.compile = function() {
      var args, c_modifiers, c_pattern, _ref1, _ref2, _ref3;
      if (this.pattern instanceof C.String && this.modifiers instanceof C.String) {
        return "/" + this.pattern.value + "/" + ((_ref1 = (_ref2 = this.modifiers) != null ? _ref2.value : void 0) != null ? _ref1 : '');
      } else {
        c_pattern = this.pattern._compile();
        c_modifiers = (_ref3 = this.modifiers) != null ? _ref3._compile() : void 0;
        args = [c_pattern];
        if (c_modifiers) {
          args.push(c_modifiers);
        }
        return "new RegExp(" + (args.join(', ')) + ")";
      }
    };

    return Regex;

  })(C.Construct);

  C.Rest = (function(_super) {

    __extends(Rest, _super);

    function Rest(sym) {
      this.sym = sym;
      Rest.__super__.constructor.apply(this, arguments);
      if (this.sym instanceof C.String) {
        this.sym = new C.Symbol(this.sym.value, this.sym.yy);
      } else if ((core.to_type(this.sym)) === "string") {
        this.sym = new C.Symbol(this.sym, this.yy);
      }
      if (!(this.sym instanceof C.Symbol)) {
        this.error("A rest param must be a symbol.");
      }
    }

    Rest.prototype.compile = function() {
      return this.sym._compile();
    };

    return Rest;

  })(C.Construct);

  C.Scope = (function() {

    function Scope(config) {
      var push_to_current;
      if (config == null) {
        config = {};
      }
      push_to_current = config.push_to_current;
      this.last_scope = C.current_scope();
      this.vars = {};
      if (push_to_current == null) {
        push_to_current = true;
      }
      if (push_to_current) {
        C.push_scope(this);
      }
    }

    Scope.prototype.def_var = function(_var, val) {
      if (this.var_defined(_var)) {
        _var.error_cant_redefine();
      }
      return this.vars[_var.name] = {
        _var: _var,
        val: val
      };
    };

    Scope.prototype.var_defined = function(_var) {
      return _var.name in this.vars;
    };

    Scope.prototype.set_var = function(_var, val) {
      if (!this.var_defined(_var)) {
        _var.error_cant_set();
      }
      return this.vars[_var.name].val = val;
    };

    Scope.prototype.get_val = function(_var) {
      var _ref1;
      return (_ref1 = this.vars[_var.name]) != null ? _ref1.val : void 0;
    };

    Scope.prototype.quiet_def_var = function(_var) {
      try {
        return this.def_var(_var);
      } catch (_error) {}
    };

    Scope.prototype.var_stmt = function() {
      var c_vars, _var;
      if (Object.keys(this.vars).length) {
        c_vars = (function() {
          var _ref1, _results;
          _ref1 = this.vars;
          _results = [];
          for (name in _ref1) {
            if (!__hasProp.call(_ref1, name)) continue;
            _var = _ref1[name]._var;
            _results.push(_var._compile());
          }
          return _results;
        }).call(this);
        return "var " + (c_vars.join(', ')) + ";\n";
      } else {
        return '';
      }
    };

    return Scope;

  })();

  C.String = (function(_super) {

    __extends(String, _super);

    function String(value) {
      this.value = value;
      String.__super__.constructor.apply(this, arguments);
    }

    String.prototype.compile = function() {
      var value;
      value = this.value.replace(/'/g, "\\'").replace(/\n/g, '\\n');
      return "'" + value + "'";
    };

    String.prototype.toString = function() {
      return this.compile();
    };

    return String;

  })(C.Construct);

  C.Symbol = (function(_super) {

    __extends(Symbol, _super);

    function Symbol(name) {
      this.name = name;
      if (this.name instanceof C.Symbol) {
        this.name = this.name.name;
      }
      Symbol.__super__.constructor.apply(this, arguments);
    }

    Symbol.prototype.compile = function() {
      return C.Var.text_to_js_identifier(this.name);
    };

    Symbol.prototype.error_cant_redefine = function() {
      return this.error("Can't redefine var " + this.name);
    };

    Symbol.prototype.error_cant_set = function() {
      return this.error("Can't set nonexistant var " + this.name);
    };

    Symbol.gensym = function(s, yy) {
      var now, rand;
      if (s == null) {
        s = "sym";
      }
      if (s instanceof C.Symbol) {
        s = s.name;
      }
      now = (+new Date()).toString(36);
      rand = Math.floor(Math.random() * 1e6).toString(36);
      return new this("" + s + "-" + rand + "-" + now, yy);
    };

    Symbol.text_to_js_identifier = function(text, conversions) {
      var _char_wrapper;
      if ((this.JS_KEYWORDS.indexOf(text)) >= 0) {
        return this.wrapper(text);
      }
      if (text.length === 0) {
        return this.wrapper("null");
      }
      _char_wrapper = this.char_wrapper.bind(this, conversions);
      return ((text.replace(this.WRAPPER_REGEX, this.wrapper)).replace(/^\d/, _char_wrapper)).replace(/[^\w\$]/g, _char_wrapper);
    };

    Symbol.char_wrapper = function(conversions, _char) {
      var txt, _ref1, _ref2;
      if (conversions == null) {
        conversions = {};
      }
      txt = (_ref1 = (_ref2 = conversions[_char]) != null ? _ref2 : this.JS_ILLEGAL_IDENTIFIER_CHARS[_char]) != null ? _ref1 : "ASCII_" + (_char.charCodeAt(0));
      return this.wrapper(txt);
    };

    Symbol.wrapper = function(text) {
      return "" + this.WRAPPER_PREFIX + text + this.WRAPPER_SUFFIX;
    };

    Symbol.WRAPPER_PREFIX = "_$";

    Symbol.WRAPPER_SUFFIX = "_";

    Symbol.WRAPPER_REGEX = /_\$[^_]+_/g;

    Symbol.JS_KEYWORDS = ["break", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "enum", "export", "extends", "false", "finally", "for", "function", "if", "implements", "import", "in", "instanceof", "interface", "let", "new", "null", "package", "private", "protected", "public", "return", "static", "switch", "super", "this", "throw", "true", "try", "typeof", "undefined", "var", "void", "while", "with", "yield"];

    Symbol.JS_ILLEGAL_IDENTIFIER_CHARS = {
      "~": "tilde",
      "`": "backtick",
      "!": "exclamationmark",
      "@": "at",
      "#": "pound",
      "%": "percent",
      "^": "carat",
      "&": "amperstand",
      "*": "asterisk",
      "(": "leftparen",
      ")": "rightparen",
      "-": "dash",
      "+": "plus",
      "=": "equals",
      "{": "leftcurly",
      "}": "rightcurly",
      "[": "leftsquare",
      "]": "rightsquare",
      "|": "pipe",
      "\\": "backslash",
      "\"": "doublequote",
      "'": "singlequote",
      ":": "colon",
      ";": "semicolon",
      "<": "leftangle",
      ">": "rightangle",
      ",": "comma",
      ".": "period",
      "?": "questionmark",
      "/": "forwardslash",
      " ": "space",
      "\t": "tab",
      "\n": "newline",
      "\r": "carriagereturn"
    };

    return Symbol;

  })(C.Construct);

  C.Var = (function(_super) {

    __extends(Var, _super);

    function Var() {
      Var.__super__.constructor.apply(this, arguments);
    }

    Var.prototype.compile = function() {
      var scope;
      if (!(this.defined != null)) {
        scope = C.current_scope();
        scope.def_var(this);
        this.defined = true;
      }
      return Var.__super__.compile.apply(this, arguments);
    };

    return Var;

  })(C.Symbol);

  C.Var.Set = (function(_super) {

    __extends(Set, _super);

    function Set(_arg, yy) {
      var value, _ref1;
      this._var = _arg._var, value = _arg.value, this.must_exist = _arg.must_exist;
      Set.__super__.constructor.apply(this, arguments);
      this.value = value;
      if ((_ref1 = this.must_exist) == null) {
        this.must_exist = true;
      }
    }

    Set.prototype.compile = function() {
      var c_val, c_var, scope;
      c_var = this._var._compile();
      c_val = this.value._compile();
      scope = C.find_scope_with_var(this._var);
      if (this.must_exist && !scope) {
        this._var.error_cant_set();
      }
      if (scope != null) {
        scope.set_var(this._var, this.value);
      }
      return "" + c_var + " = " + c_val;
    };

    return Set;

  })(C.Construct);

  C.TryCatch = (function(_super) {

    __extends(TryCatch, _super);

    function TryCatch(_arg) {
      var _ref1, _ref2, _ref3, _ref4;
      this._try = _arg._try, this.err_name = _arg.err_name, this._catch = _arg._catch, this._finally = _arg._finally;
      if ((_ref1 = this.err_name) == null) {
        this.err_name = C.Symbol.gensym("err");
      }
      if ((_ref2 = this._try) == null) {
        this._try = [];
      }
      if ((_ref3 = this._catch) == null) {
        this._catch = [];
      }
      if ((_ref4 = this._finally) == null) {
        this._finally = [];
      }
      TryCatch.__super__.constructor.apply(this, arguments);
    }

    TryCatch.prototype.compile = function() {
      var c_catch, c_err_name, c_finally, c_try, item;
      c_try = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this._try;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item._compile());
        }
        return _results;
      }).call(this);
      c_err_name = this.err_name._compile();
      c_catch = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this._catch;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item._compile());
        }
        return _results;
      }).call(this);
      c_finally = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this._finally;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          item = _ref1[_i];
          _results.push(item._compile());
        }
        return _results;
      }).call(this);
      c_try = c_try.length ? "\n" + (c_try.join(';\n')) + ";\n" : "";
      c_catch = c_catch.length ? "\n" + (c_catch.join(';\n')) + ";\n" : "";
      c_finally = c_finally.length ? " finally {\n" + (c_finally.join(';\n')) + ";\n}" : "";
      return "try {" + c_try + "} catch (" + c_err_name + ") {" + c_catch + "}" + c_finally;
    };

    TryCatch.prototype.should_return = function() {
      var c_last, f_last, t_last;
      if (this._finally.length) {
        f_last = this._finally.pop();
        this._finally.push(f_last.should_return());
      } else {
        if (this._try.length) {
          t_last = this._try.pop();
          this._try.push(t_last.should_return());
        }
        if (this._catch.length) {
          c_last = this._catch.pop();
          this._catch.push(c_last.should_return());
        }
      }
      return this;
    };

    TryCatch.prototype.tail_node = function() {
      if (this._finally.length) {
        return this._finally[this._finally.length - 1];
      } else if (this._catch.length) {
        return this._catch[this._catch.length - 1];
      } else {
        return this._try[this._try.length - 1];
      }
    };

    return TryCatch;

  })(C.Construct);

  C.TryCatchExpression = (function(_super) {

    __extends(TryCatchExpression, _super);

    function TryCatchExpression() {
      return TryCatchExpression.__super__.constructor.apply(this, arguments);
    }

    TryCatchExpression.prototype.compile = function() {
      return "(function () { " + TryCatchExpression.__super__.compile.apply(this, arguments) + "; })()";
    };

    return TryCatchExpression;

  })(C.TryCatch);

}).call(this);
/* Jison generated parser */
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"s_expression_list":4,"EOF":5,"s_expression":6,"special_form":7,"list":8,"symbol":9,"literal":10,"callable_list":11,"array":12,"object":13,"(":14,"element_list":15,")":16,"[":17,"]":18,"OBJECT":19,"kvpair_list":20,"OBJECT_END":21,"kvpair":22,"element":23,"element_list_element":24,"rest_element":25,"REST":26,"QUOTE":27,"QUASIQUOTE":28,"UNQUOTE":29,"UNQUOTE_SPLICING":30,"FUNCTION":31,"string":32,"regex":33,"number":34,"atom":35,"BOOLEAN_TRUE":36,"BOOLEAN_FALSE":37,"REGEX":38,"FLAGS":39,"FIXNUM":40,"FLOAT":41,"BASENUM":42,"STRING":43,"keyword":44,"KEYWORD":45,"IDENTIFIER":46,"PROPERTY_ACCESS":47,"FUNCTION_ACCESS":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"(",16:")",17:"[",18:"]",19:"OBJECT",21:"OBJECT_END",26:"REST",27:"QUOTE",28:"QUASIQUOTE",29:"UNQUOTE",30:"UNQUOTE_SPLICING",31:"FUNCTION",36:"BOOLEAN_TRUE",37:"BOOLEAN_FALSE",38:"REGEX",39:"FLAGS",40:"FIXNUM",41:"FLOAT",42:"BASENUM",43:"STRING",45:"KEYWORD",46:"IDENTIFIER",47:"PROPERTY_ACCESS",48:"FUNCTION_ACCESS"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[8,1],[8,1],[8,1],[11,3],[12,3],[12,2],[13,3],[13,2],[20,1],[20,2],[22,2],[15,1],[15,2],[24,1],[24,1],[25,2],[23,1],[7,2],[7,2],[7,2],[7,2],[7,3],[10,1],[10,1],[10,1],[10,1],[35,2],[35,1],[35,1],[33,2],[34,1],[34,1],[34,1],[32,1],[32,1],[44,2],[9,1],[9,1],[9,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:
      var var_eval = new C.Var("eval");
      var oppo_eval = new C.Symbol("__oppo_eval__");
      var set_eval = new C.Var.Set({_var: var_eval, value: oppo_eval});
      var lambda = new C.Lambda({body: [set_eval].concat($$[$0-1])}, yy);
      lambda.s_expression_list = $$[$0-1]
      return lambda;
    
break;
case 2: return new C.Null(yy); 
break;
case 3: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: this.$ = [$$[$0]]; 
break;
case 12: this.$ = new C.List($$[$0-1], yy); 
break;
case 13: this.$ = call_by_name("array", $$[$0-1], yy); 
break;
case 14: this.$ = call_by_name("array", [], yy); 
break;
case 15: this.$ = call_by_name("object", $$[$0-1], yy); 
break;
case 16: this.$ = call_by_name("object", null, yy); 
break;
case 17: this.$ = [$$[$0]]; 
break;
case 18: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 19: this.$ = new C.List([$$[$0-1], $$[$0]]); this.$.quoted = true; 
break;
case 20: this.$ = [$$[$0]]; 
break;
case 21: this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 24: this.$ = new C.Rest($$[$0], yy); 
break;
case 26: this.$ = call_by_name("quote", [$$[$0]]); 
break;
case 27: this.$ = call_by_name("quasiquote", [$$[$0]]); 
break;
case 28: this.$ = call_by_name("unquote", [$$[$0]]); 
break;
case 29: this.$ = call_by_name("unquote-splicing", [$$[$0]]); 
break;
case 30: this.$ = call_by_name("lambda", [$$[$0-1]]); 
break;
case 35: this.$ = new C.Null(yy); 
break;
case 36: this.$ = new C.True(yy); 
break;
case 37: this.$ = new C.False(yy); 
break;
case 38: this.$ = call_by_name("regex", [new C.String($$[$0-1], yy), new C.String($$[$0].substr(1), yy)], yy); 
break;
case 39: this.$ = new C.Number($$[$0], yy); 
break;
case 40: this.$ = new C.Number($$[$0], yy); 
break;
case 41:
      var basenum = $$[$0].split('#');
      this.$ = new C.Number({value: basenum[1], base: basenum[0]}, yy);
    
break;
case 42: this.$ = new C.String($$[$0], yy); 
break;
case 44: $$[$0].quoted = true; this.$ = call_by_name("symbol->keyword", [$$[$0]], yy); 
break;
case 45:
      if (/^nil$/i.test($$[$0]))
        this.$ = new C.Null(yy);
      else if (/^true$/i.test($$[$0]))
        this.$ = new C.True(yy);
      else if (/^false$/i.test($$[$0]))
        this.$ = new C.False(yy);
      else
        this.$ = new C.Symbol($$[$0], yy);
    
break;
case 46: this.$ = new C.Symbol("get-prop", yy); 
break;
case 47: this.$ = new C.Symbol("get-fn", yy); 
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{1:[3]},{5:[1,36],6:37,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{1:[2,2]},{5:[2,4],14:[2,4],17:[2,4],19:[2,4],27:[2,4],28:[2,4],29:[2,4],30:[2,4],31:[2,4],36:[2,4],37:[2,4],38:[2,4],40:[2,4],41:[2,4],42:[2,4],43:[2,4],45:[2,4],46:[2,4],47:[2,4],48:[2,4]},{5:[2,5],14:[2,5],16:[2,5],17:[2,5],18:[2,5],19:[2,5],21:[2,5],26:[2,5],27:[2,5],28:[2,5],29:[2,5],30:[2,5],31:[2,5],36:[2,5],37:[2,5],38:[2,5],40:[2,5],41:[2,5],42:[2,5],43:[2,5],45:[2,5],46:[2,5],47:[2,5],48:[2,5]},{5:[2,6],14:[2,6],16:[2,6],17:[2,6],18:[2,6],19:[2,6],21:[2,6],26:[2,6],27:[2,6],28:[2,6],29:[2,6],30:[2,6],31:[2,6],36:[2,6],37:[2,6],38:[2,6],40:[2,6],41:[2,6],42:[2,6],43:[2,6],45:[2,6],46:[2,6],47:[2,6],48:[2,6]},{5:[2,7],14:[2,7],16:[2,7],17:[2,7],18:[2,7],19:[2,7],21:[2,7],26:[2,7],27:[2,7],28:[2,7],29:[2,7],30:[2,7],31:[2,7],36:[2,7],37:[2,7],38:[2,7],40:[2,7],41:[2,7],42:[2,7],43:[2,7],45:[2,7],46:[2,7],47:[2,7],48:[2,7]},{5:[2,8],14:[2,8],16:[2,8],17:[2,8],18:[2,8],19:[2,8],21:[2,8],26:[2,8],27:[2,8],28:[2,8],29:[2,8],30:[2,8],31:[2,8],36:[2,8],37:[2,8],38:[2,8],40:[2,8],41:[2,8],42:[2,8],43:[2,8],45:[2,8],46:[2,8],47:[2,8],48:[2,8]},{6:38,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{6:39,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{6:40,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{6:41,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],15:42,17:[1,25],19:[1,26],23:44,24:43,25:45,26:[1,47],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{5:[2,9],14:[2,9],16:[2,9],17:[2,9],18:[2,9],19:[2,9],21:[2,9],26:[2,9],27:[2,9],28:[2,9],29:[2,9],30:[2,9],31:[2,9],36:[2,9],37:[2,9],38:[2,9],40:[2,9],41:[2,9],42:[2,9],43:[2,9],45:[2,9],46:[2,9],47:[2,9],48:[2,9]},{5:[2,10],14:[2,10],16:[2,10],17:[2,10],18:[2,10],19:[2,10],21:[2,10],26:[2,10],27:[2,10],28:[2,10],29:[2,10],30:[2,10],31:[2,10],36:[2,10],37:[2,10],38:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],45:[2,10],46:[2,10],47:[2,10],48:[2,10]},{5:[2,11],14:[2,11],16:[2,11],17:[2,11],18:[2,11],19:[2,11],21:[2,11],26:[2,11],27:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],36:[2,11],37:[2,11],38:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11]},{5:[2,45],14:[2,45],16:[2,45],17:[2,45],18:[2,45],19:[2,45],21:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],30:[2,45],31:[2,45],36:[2,45],37:[2,45],38:[2,45],40:[2,45],41:[2,45],42:[2,45],43:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45]},{5:[2,46],14:[2,46],16:[2,46],17:[2,46],18:[2,46],19:[2,46],21:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],31:[2,46],36:[2,46],37:[2,46],38:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46]},{5:[2,47],14:[2,47],16:[2,47],17:[2,47],18:[2,47],19:[2,47],21:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],30:[2,47],31:[2,47],36:[2,47],37:[2,47],38:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47]},{5:[2,31],14:[2,31],16:[2,31],17:[2,31],18:[2,31],19:[2,31],21:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],36:[2,31],37:[2,31],38:[2,31],40:[2,31],41:[2,31],42:[2,31],43:[2,31],45:[2,31],46:[2,31],47:[2,31],48:[2,31]},{5:[2,32],14:[2,32],16:[2,32],17:[2,32],18:[2,32],19:[2,32],21:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],30:[2,32],31:[2,32],36:[2,32],37:[2,32],38:[2,32],40:[2,32],41:[2,32],42:[2,32],43:[2,32],45:[2,32],46:[2,32],47:[2,32],48:[2,32]},{5:[2,33],14:[2,33],16:[2,33],17:[2,33],18:[2,33],19:[2,33],21:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],36:[2,33],37:[2,33],38:[2,33],40:[2,33],41:[2,33],42:[2,33],43:[2,33],45:[2,33],46:[2,33],47:[2,33],48:[2,33]},{5:[2,34],14:[2,34],16:[2,34],17:[2,34],18:[2,34],19:[2,34],21:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],36:[2,34],37:[2,34],38:[2,34],40:[2,34],41:[2,34],42:[2,34],43:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],15:48,16:[1,49],17:[1,25],19:[1,26],23:44,24:43,25:45,26:[1,47],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],15:50,17:[1,25],18:[1,51],19:[1,26],23:44,24:43,25:45,26:[1,47],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],20:52,21:[1,53],22:54,23:55,27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{5:[2,42],14:[2,42],16:[2,42],17:[2,42],18:[2,42],19:[2,42],21:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],30:[2,42],31:[2,42],36:[2,42],37:[2,42],38:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42]},{5:[2,43],14:[2,43],16:[2,43],17:[2,43],18:[2,43],19:[2,43],21:[2,43],26:[2,43],27:[2,43],28:[2,43],29:[2,43],30:[2,43],31:[2,43],36:[2,43],37:[2,43],38:[2,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43]},{39:[1,56]},{5:[2,39],14:[2,39],16:[2,39],17:[2,39],18:[2,39],19:[2,39],21:[2,39],26:[2,39],27:[2,39],28:[2,39],29:[2,39],30:[2,39],31:[2,39],36:[2,39],37:[2,39],38:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39]},{5:[2,40],14:[2,40],16:[2,40],17:[2,40],18:[2,40],19:[2,40],21:[2,40],26:[2,40],27:[2,40],28:[2,40],29:[2,40],30:[2,40],31:[2,40],36:[2,40],37:[2,40],38:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40]},{5:[2,41],14:[2,41],16:[2,41],17:[2,41],18:[2,41],19:[2,41],21:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[2,41],30:[2,41],31:[2,41],36:[2,41],37:[2,41],38:[2,41],40:[2,41],41:[2,41],42:[2,41],43:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41]},{5:[2,36],14:[2,36],16:[2,36],17:[2,36],18:[2,36],19:[2,36],21:[2,36],26:[2,36],27:[2,36],28:[2,36],29:[2,36],30:[2,36],31:[2,36],36:[2,36],37:[2,36],38:[2,36],40:[2,36],41:[2,36],42:[2,36],43:[2,36],45:[2,36],46:[2,36],47:[2,36],48:[2,36]},{5:[2,37],14:[2,37],16:[2,37],17:[2,37],18:[2,37],19:[2,37],21:[2,37],26:[2,37],27:[2,37],28:[2,37],29:[2,37],30:[2,37],31:[2,37],36:[2,37],37:[2,37],38:[2,37],40:[2,37],41:[2,37],42:[2,37],43:[2,37],45:[2,37],46:[2,37],47:[2,37],48:[2,37]},{9:57,46:[1,17],47:[1,18],48:[1,19]},{1:[2,1]},{5:[2,3],14:[2,3],17:[2,3],19:[2,3],27:[2,3],28:[2,3],29:[2,3],30:[2,3],31:[2,3],36:[2,3],37:[2,3],38:[2,3],40:[2,3],41:[2,3],42:[2,3],43:[2,3],45:[2,3],46:[2,3],47:[2,3],48:[2,3]},{5:[2,26],14:[2,26],16:[2,26],17:[2,26],18:[2,26],19:[2,26],21:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[2,26],30:[2,26],31:[2,26],36:[2,26],37:[2,26],38:[2,26],40:[2,26],41:[2,26],42:[2,26],43:[2,26],45:[2,26],46:[2,26],47:[2,26],48:[2,26]},{5:[2,27],14:[2,27],16:[2,27],17:[2,27],18:[2,27],19:[2,27],21:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],36:[2,27],37:[2,27],38:[2,27],40:[2,27],41:[2,27],42:[2,27],43:[2,27],45:[2,27],46:[2,27],47:[2,27],48:[2,27]},{5:[2,28],14:[2,28],16:[2,28],17:[2,28],18:[2,28],19:[2,28],21:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],36:[2,28],37:[2,28],38:[2,28],40:[2,28],41:[2,28],42:[2,28],43:[2,28],45:[2,28],46:[2,28],47:[2,28],48:[2,28]},{5:[2,29],14:[2,29],16:[2,29],17:[2,29],18:[2,29],19:[2,29],21:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[2,29],31:[2,29],36:[2,29],37:[2,29],38:[2,29],40:[2,29],41:[2,29],42:[2,29],43:[2,29],45:[2,29],46:[2,29],47:[2,29],48:[2,29]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],16:[1,58],17:[1,25],19:[1,26],23:44,24:59,25:45,26:[1,47],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{14:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],36:[2,20],37:[2,20],38:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],45:[2,20],46:[2,20],47:[2,20],48:[2,20]},{14:[2,22],16:[2,22],17:[2,22],18:[2,22],19:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[2,22],36:[2,22],37:[2,22],38:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],45:[2,22],46:[2,22],47:[2,22],48:[2,22]},{14:[2,23],16:[2,23],17:[2,23],18:[2,23],19:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],36:[2,23],37:[2,23],38:[2,23],40:[2,23],41:[2,23],42:[2,23],43:[2,23],45:[2,23],46:[2,23],47:[2,23],48:[2,23]},{14:[2,25],16:[2,25],17:[2,25],18:[2,25],19:[2,25],21:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],36:[2,25],37:[2,25],38:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],45:[2,25],46:[2,25],47:[2,25],48:[2,25]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],23:60,27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],16:[1,61],17:[1,25],19:[1,26],23:44,24:59,25:45,26:[1,47],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{5:[2,35],14:[2,35],16:[2,35],17:[2,35],18:[2,35],19:[2,35],21:[2,35],26:[2,35],27:[2,35],28:[2,35],29:[2,35],30:[2,35],31:[2,35],36:[2,35],37:[2,35],38:[2,35],40:[2,35],41:[2,35],42:[2,35],43:[2,35],45:[2,35],46:[2,35],47:[2,35],48:[2,35]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],18:[1,62],19:[1,26],23:44,24:59,25:45,26:[1,47],27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{5:[2,14],14:[2,14],16:[2,14],17:[2,14],18:[2,14],19:[2,14],21:[2,14],26:[2,14],27:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],36:[2,14],37:[2,14],38:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],45:[2,14],46:[2,14],47:[2,14],48:[2,14]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],21:[1,63],22:64,23:55,27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{5:[2,16],14:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],21:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],36:[2,16],37:[2,16],38:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],45:[2,16],46:[2,16],47:[2,16],48:[2,16]},{14:[2,17],17:[2,17],19:[2,17],21:[2,17],27:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],36:[2,17],37:[2,17],38:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],45:[2,17],46:[2,17],47:[2,17],48:[2,17]},{6:46,7:5,8:6,9:7,10:8,11:14,12:15,13:16,14:[1,24],17:[1,25],19:[1,26],23:65,27:[1,9],28:[1,10],29:[1,11],30:[1,12],31:[1,13],32:20,33:21,34:22,35:23,36:[1,33],37:[1,34],38:[1,29],40:[1,30],41:[1,31],42:[1,32],43:[1,27],44:28,45:[1,35],46:[1,17],47:[1,18],48:[1,19]},{5:[2,38],14:[2,38],16:[2,38],17:[2,38],18:[2,38],19:[2,38],21:[2,38],26:[2,38],27:[2,38],28:[2,38],29:[2,38],30:[2,38],31:[2,38],36:[2,38],37:[2,38],38:[2,38],40:[2,38],41:[2,38],42:[2,38],43:[2,38],45:[2,38],46:[2,38],47:[2,38],48:[2,38]},{5:[2,44],14:[2,44],16:[2,44],17:[2,44],18:[2,44],19:[2,44],21:[2,44],26:[2,44],27:[2,44],28:[2,44],29:[2,44],30:[2,44],31:[2,44],36:[2,44],37:[2,44],38:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44]},{5:[2,30],14:[2,30],16:[2,30],17:[2,30],18:[2,30],19:[2,30],21:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],36:[2,30],37:[2,30],38:[2,30],40:[2,30],41:[2,30],42:[2,30],43:[2,30],45:[2,30],46:[2,30],47:[2,30],48:[2,30]},{14:[2,21],16:[2,21],17:[2,21],18:[2,21],19:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[2,21],36:[2,21],37:[2,21],38:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],45:[2,21],46:[2,21],47:[2,21],48:[2,21]},{14:[2,24],16:[2,24],17:[2,24],18:[2,24],19:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],36:[2,24],37:[2,24],38:[2,24],40:[2,24],41:[2,24],42:[2,24],43:[2,24],45:[2,24],46:[2,24],47:[2,24],48:[2,24]},{5:[2,12],14:[2,12],16:[2,12],17:[2,12],18:[2,12],19:[2,12],21:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],36:[2,12],37:[2,12],38:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],45:[2,12],46:[2,12],47:[2,12],48:[2,12]},{5:[2,13],14:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[2,13],21:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],36:[2,13],37:[2,13],38:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],45:[2,13],46:[2,13],47:[2,13],48:[2,13]},{5:[2,15],14:[2,15],16:[2,15],17:[2,15],18:[2,15],19:[2,15],21:[2,15],26:[2,15],27:[2,15],28:[2,15],29:[2,15],30:[2,15],31:[2,15],36:[2,15],37:[2,15],38:[2,15],40:[2,15],41:[2,15],42:[2,15],43:[2,15],45:[2,15],46:[2,15],47:[2,15],48:[2,15]},{14:[2,18],17:[2,18],19:[2,18],21:[2,18],27:[2,18],28:[2,18],29:[2,18],30:[2,18],31:[2,18],36:[2,18],37:[2,18],38:[2,18],40:[2,18],41:[2,18],42:[2,18],43:[2,18],45:[2,18],46:[2,18],47:[2,18],48:[2,18]},{14:[2,19],17:[2,19],19:[2,19],21:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],36:[2,19],37:[2,19],38:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19]}],
defaultActions: {3:[2,2],36:[2,1]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};

  var L = typeof lemur === "undefined" ? require('lemur') : lemur;
  var C = L.Compiler;

  var sym = function (s, yy) {
    return new C.Symbol(s, yy)
  };

  var slice = Array.prototype.slice;
  var call_by_name = function (sname, args, yy) {
    var s = sym(sname, yy);
    return new C.List([s].concat(args), yy);
  };

  var types = {}; // oppo.compiler.types;
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0: /* comment */ 
break;
case 1: /* ignore */ 
break;
case 2: this.begin('string'); this.string_buffer = ""; 
break;
case 3: this.popState(); yy_.yytext = this.string_buffer; return 43; 
break;
case 4:this.string_buffer = yy_.yytext;
break;
case 5:this.begin('regex');
break;
case 6: this.popState(); return 39; 
break;
case 7: return 38; 
break;
case 8: return 41; 
break;
case 9: return 42; 
break;
case 10: return 40; 
break;
case 11: return 36; 
break;
case 12: return 37; 
break;
case 13: return 14; 
break;
case 14: return 16; 
break;
case 15: return 17; 
break;
case 16: return 18; 
break;
case 17: return 19; 
break;
case 18: return 21; 
break;
case 19: return 30; 
break;
case 20: return 29; 
break;
case 21: return 27; 
break;
case 22: return 28; 
break;
case 23: return 26; 
break;
case 24: return 31; 
break;
case 25: return 47; 
break;
case 26: return 48; 
break;
case 27: return 45; 
break;
case 28: return 46; 
break;
case 29: return 5; 
break;
case 30: return 'INVALID'; 
break;
}
};
lexer.rules = [/^(?:;.*)/,/^(?:\s+)/,/^(?:")/,/^(?:")/,/^(?:(\\"|[^"])*)/,/^(?:#\/)/,/^(?:\/[a-zA-Z]*)/,/^(?:(\\\/|[^\/])*)/,/^(?:[\+\-]?\d*\.\d+)/,/^(?:\d{1,2}#[\+\-]?\w+)/,/^(?:[\+\-]?\d+)/,/^(?:#[tT]{1})/,/^(?:#[fF]{1})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,@)/,/^(?:,)/,/^(?:')/,/^(?:`)/,/^(?:\.\.\.)/,/^(?:#\()/,/^(?:@)/,/^(?:\.)/,/^(?::)/,/^(?:[\w@#\.:!\$%\^&\*\-\+='"\?\|\/\\<>~]+)/,/^(?:$)/,/^(?:.)/];
lexer.conditions = {"string":{"rules":[3,4],"inclusive":false},"regex":{"rules":[6,7],"inclusive":false},"INITIAL":{"rules":[0,1,2,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}// Generated by CoffeeScript 1.3.3
(function() {
  var C, L, binary_op, call_macro, call_macro_transform, clone, compare_op, compile, compile_list, compile_runtime, define, defmacro, equality_op, keys, last, map, math_op, oppo_eval, oppoize, push_unshift_op, read, root, scope_stack, setup_built_in_macros, trim, type_of, types, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof global !== "undefined" && global !== null ? global : window;

  L = lemur;

  C = L.Compiler;

  root.oppo = {
    compiler: {
      types: {},
      scope_stack: [{}]
    }
  };

  oppo.root = root;

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    oppo.lodash = module.exports;
    module.exports = oppo;
  }

  _ref = oppo.compiler, scope_stack = _ref.scope_stack, types = _ref.types;

  oppo.Error = (function(_super) {

    __extends(Error, _super);

    function Error(name, message) {
      this.name = name;
      this.message = message;
    }

    Error.prototype.toString = function() {
      return "" + this.name + ": " + this.message;
    };

    Error.prototype.raise = function() {
      throw this;
    };

    return Error;

  })(Error);

  oppo.ArityException = (function(_super) {

    __extends(ArityException, _super);

    function ArityException(message) {
      if (message != null) {
        this.message = message;
      }
    }

    ArityException.prototype.name = "Arity-Exception";

    ArityException.prototype.message = "Wrong number of arguments";

    return ArityException;

  })(oppo.Error);

  type_of = lemur.core.to_type;

  oppo.stringify = function(o) {
    var items, key, type, value, _ref1;
    type = type_of(o);
    switch (type) {
      case "array":
        return C.List.prototype.toOppoString.call({
          value: o
        });
      case "object":
        if (o instanceof C.Construct) {
          return (_ref1 = typeof o.toOppoString === "function" ? o.toOppoString() : void 0) != null ? _ref1 : o.toString();
        } else {
          items = (function() {
            var _results;
            _results = [];
            for (key in o) {
              value = o[key];
              _results.push("" + (oppo.stringify(key)) + " " + (oppo.stringify(value)));
            }
            return _results;
          })();
          return "{ " + (items.join("\n")) + " }";
        }
        break;
      default:
        return "" + o;
    }
  };

  oppo.stringify_html = function(o) {
    var s;
    s = oppo.stringify(o);
    return s.replace(/\n/g, "<br />");
  };

  clone = (_ref1 = Object.create) != null ? _ref1 : function(o) {
    function ObjectClone () {};
    ObjectClone.prototype = o;
    return new ObjectClone();
  };

  keys = (_ref2 = Object.keys) != null ? _ref2 : function(o) {
    var prop, _results;
    _results = [];
    for (prop in o) {
      if (!__hasProp.call(o, prop)) continue;
      _results.push(prop);
    }
    return _results;
  };

  last = function(list) {
    if ((list != null ? list.length : void 0) != null) {
      return list[list.length - 1];
    }
  };

  map = function(list, fn) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      _results.push(fn(item));
    }
    return _results;
  };

  compile_list = function(list, arg, unquoted) {
    var item, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      item = list[_i];
      if (unquoted) {
        item.quoted = false;
      }
      _results.push(item._compile(arg));
    }
    return _results;
  };

  trim = String.prototype.trim || function() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  };

  (function() {
    var normal_compile, sym_compile;
    C.Construct.prototype._compile = function() {
      var compile_fn;
      compile_fn = this.quasiquoted ? this.compile_quasiquoted : this.unquoted ? this.compile_unquoted : this.unquote_spliced ? this.compile_unquote_spliced : this.quoted ? this.compile_quoted : this.compile;
      return compile_fn.apply(this, arguments);
    };
    C.Construct.prototype.compile_quoted = function() {
      return "new lemur.Compiler." + this.constructor.name + "('" + this.value + "')";
    };
    C.Construct.prototype.compile_quasiquoted = function() {
      return this.compile_quoted.apply(this, arguments);
    };
    normal_compile = function() {
      return this.compile.apply(this, arguments);
    };
    C.Construct.prototype.compile_unquoted = normal_compile;
    C.Construct.prototype.compile_unquote_spliced = normal_compile;
    C.Number.prototype.valueOf = function() {
      return +this.compile();
    };
    C.Number.prototype.toString = C.Number.prototype.compile;
    sym_compile = C.Symbol.prototype.compile;
    C.Symbol.prototype.compile = function() {
      var c_sym, name;
      name = this.name;
      this.name = name.replace(/\-/g, '_');
      c_sym = sym_compile.call(this);
      this.name = name;
      return c_sym;
    };
    C.String.prototype.toString = function() {
      return eval(this.compile());
    };
    C.String.prototype.valueOf = C.String.prototype.toString;
    C.If.prototype.transform = function() {
      this.then = C.Macro.transform(this.then);
      if (this._else != null) {
        this._else = C.Macro.transform(this._else);
      }
      return this;
    };
    return C.Function.ArgsList.prototype.slice_fn = "__slice__.call";
  })();

  oppoize = oppo.oppoize = function() {
    var expr, exprs, pairs, prop, type, val, _i, _len, _results;
    exprs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = exprs.length; _i < _len; _i++) {
      expr = exprs[_i];
      type = type_of(expr);
      if (expr instanceof C.Construct) {
        _results.push(expr);
      } else if (type === "array") {
        _results.push(new C.List(oppoize.apply(null, expr)));
      } else if (type === "number") {
        _results.push(new C.Number(expr));
      } else if (type === "string") {
        _results.push(new C.String(expr));
      } else if (type === "regexp") {
        _results.push(new C.RegExp({
          pattern: expr.source,
          modifiers: "" + (expr.multiline ? 'm' : '') + (expr.global ? 'g' : '') + (expr.ignoreCase ? 'i' : '')
        }));
      } else if (expr === true) {
        _results.push(new C.True());
      } else if (expr === false) {
        _results.push(new C.False());
      } else if (!(expr != null)) {
        _results.push(new C.Null());
      } else if (type === "object") {
        pairs = (function() {
          var _results1;
          _results1 = [];
          for (prop in expr) {
            if (!__hasProp.call(expr, prop)) continue;
            val = expr[prop];
            _results1.push([oppoize(prop), oppoize(expr)]);
          }
          return _results1;
        })();
        _results.push(new C.Object(pairs));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  read = oppo.read = oppo.compiler.read = function() {
    return parser.parse.apply(parser, arguments);
  };

  compile = oppo.compile = oppo.compiler.compile = function(sexp, comp_runtime, include_directory) {
    if (comp_runtime == null) {
      comp_runtime = true;
    }
    sexp = oppoize(sexp)[0];
    return new lemur.Compiler({
      include_directory: include_directory
    }).compile(function() {
      var c_sym_prog, prog, r, sym_prog;
      setup_built_in_macros();
      if (comp_runtime) {
        r = compile_runtime();
        eval(r);
      }
      if (r != null) {
        r = "\n// Oppo runtime\n" + r;
      } else {
        r = "";
      }
      sym_prog = C.Var.gensym("program");
      c_sym_prog = sym_prog.compile();
      prog = sexp._compile();
      return "// Your program\nvar " + c_sym_prog + " = " + prog + ";\n\n" + r + "\n\n// Run the oppo program\nif (lemur.core.to_type(" + c_sym_prog + ") === 'function')\n  " + c_sym_prog + "();\nelse\n  " + c_sym_prog + ";";
    });
  };

  oppo.compile_runtime = function() {
    var sexp;
    sexp = new C.Null(1);
    return compile(sexp);
  };

  oppo_eval = oppo["eval"] = function(sexp) {
    return root["eval"](compile(sexp));
  };

  C.Keyword = (function(_super) {

    __extends(Keyword, _super);

    function Keyword() {
      return Keyword.__super__.constructor.apply(this, arguments);
    }

    Keyword.prototype.toOppoString = function() {
      return ":" + this.value;
    };

    return Keyword;

  })(C.String);

  C.Lambda = (function(_super) {

    __extends(Lambda, _super);

    function Lambda(config, yy) {
      this.arity = config.arity;
      config.autoreturn = true;
      Lambda.__super__.constructor.call(this, config, yy);
    }

    Lambda.prototype.compile = function() {
      var body, item, result;
      body = this.body;
      this.body = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = body.length; _i < _len; _i++) {
          item = body[_i];
          _results.push(C.Macro.transform(item));
        }
        return _results;
      })();
      result = Lambda.__super__.compile.apply(this, arguments);
      this.body = body;
      return result;
    };

    return Lambda;

  })(C.Function);

  C.List = (function(_super) {

    __extends(List, _super);

    function List() {
      return List.__super__.constructor.apply(this, arguments);
    }

    List.prototype.compile = function() {
      return call_macro.apply(null, ["call"].concat(__slice.call(this.value)));
    };

    List.prototype.to_transform = ["quote", "quasiquote", "unquote", "unquote-splicing"];

    List.prototype.transform_child = function(child) {
      var fst, _ref3;
      if (child instanceof C.List && !(child.quoted || child.quasiquoted)) {
        fst = child.items[0];
        if (fst instanceof C.Symbol && !(child.quoted || child.quasiquoted)) {
          if (_ref3 = fst.name, __indexOf.call(this.to_transform, _ref3) >= 0) {
            return C.Macro.transform(child, 1);
          }
        }
      }
      return child;
    };

    List.prototype.should_quote_child = function(child) {
      return child instanceof C.List || (!(child instanceof C.Atom) && !(child instanceof C.String) && !(child instanceof C.Number) && !(child instanceof C.Regex) && !(child instanceof C.Array));
    };

    List.prototype.should_quasiquote_child = function(child) {
      return this.quasiquoted && !(child.unquoted || child.unquote_spliced) && (this.is_macro_template || this.should_quote_child(child));
    };

    List.prototype.compile_quoted = function() {
      var arg, args, array, array_has_length, arrays, current_group, item, last_result, result, ret, spliced, _i, _len, _ref3, _ref4, _ref5;
      current_group = [];
      arrays = [];
      spliced = [];
      _ref3 = this.items;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        item = _ref3[_i];
        item = this.transform_child(item);
        if (this.quasiquoted) {
          if ((_ref4 = item.quasiquoted) == null) {
            item.quasiquoted = this.should_quasiquote_child(item);
          }
        } else {
          if ((_ref5 = item.quoted) == null) {
            item.quoted = this.should_quote_child(item);
          }
        }
        if (item.unquote_spliced) {
          arrays.push(new C.Array(current_group));
          spliced.push(item);
          current_group = [];
        } else {
          current_group.push(item);
        }
      }
      if (current_group && arrays.length) {
        arrays.push(new C.Array(current_group));
        spliced.push(null);
        current_group = [];
      }
      if (!arrays.length) {
        ret = new C.Array(current_group);
      } else {
        while (arrays.length) {
          array = arrays.pop();
          arg = spliced.pop();
          args = [];
          if (arg != null) {
            args.push(arg);
          }
          if (typeof last_result !== "undefined" && last_result !== null) {
            args.push(last_result);
          }
          if (array instanceof C.Array && !array.items.length && args.length) {
            arg = args.shift();
            array = arg;
          }
          args = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
              arg = args[_j];
              _results.push(arg._compile());
            }
            return _results;
          })();
          array_has_length = !(array instanceof C.Array) || array.items.length;
          result = array_has_length && args.length ? "" + (array._compile()) + ".concat(" + (args.join(', ')) + ")" : array_has_length ? array._compile() : void 0;
          if (result) {
            last_result = new C.Raw(result);
          }
        }
        ret = last_result != null ? last_result : new C.Array([]);
      }
      return ret.compile();
    };

    List.prototype.compile_quasiquoted = function() {
      return this.compile_quoted();
    };

    List.prototype.toOppoString = function() {
      var item, prefix, s_value;
      s_value = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.value;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          item = _ref3[_i];
          _results.push(oppo.stringify(item));
        }
        return _results;
      }).call(this);
      prefix = this.quoted ? "'" : this.quasiquoted ? "`" : this.unquoted ? "," : this.unquote_spliced ? ",@" : "";
      return "" + prefix + "(" + (s_value.join(' ')) + ")";
    };

    List.prototype.transform = function() {
      if (!(this.quoted || this.quasiquoted || this.unquote_spliced)) {
        return call_macro_transform.apply(null, ["call"].concat(__slice.call(this.value)));
      }
    };

    return List;

  })(C.Array);

  C.Macro = (function(_super) {

    __extends(Macro, _super);

    function Macro(_arg, yy) {
      var name, scope, transform;
      name = _arg.name, this.argnames = _arg.argnames, this.template = _arg.template, transform = _arg.transform, this.invoke = _arg.invoke;
      this.name = new C.Var(name);
      this.template;
      scope = C.current_scope();
      this.name._compile();
      scope.set_var(this.name, this);
      if (transform != null) {
        this.transform = transform;
      }
      Macro.__super__.constructor.call(this, null, yy);
    }

    Macro.prototype.compile = function() {
      return "null";
    };

    Macro.prototype.invoke = function() {
      var args, x;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      x = this.transform.apply(this, args);
      return x.compile();
    };

    Macro.prototype.transform = function() {
      var arg, args, c_template, fn, grp, ls, sym_ls, t, transformed;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      c_template = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.template;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          t = _ref3[_i];
          _results.push(new C.Raw(t._compile()));
        }
        return _results;
      }).call(this);
      grp = new C.CommaGroup(c_template, this.yy);
      sym_ls = C.Var.gensym("ls");
      fn = new C.Lambda({
        body: [
          new C.Var.Set({
            _var: sym_ls,
            value: grp
          }), new C.Raw("" + (sym_ls._compile()) + ".quoted = true"), sym_ls
        ],
        args: this.argnames
      }, this.yy);
      args = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          arg = arg.clone();
          arg.quoted = true;
          _results.push(arg);
        }
        return _results;
      })();
      ls = new C.List([fn].concat(__slice.call(args)), this.yy);
      c_template = ls.compile();
      if (!(typeof __oppo_runtime_defined__ !== "undefined" && __oppo_runtime_defined__ !== null) || !__oppo_runtime_defined__) {
        c_template = "" + (compile_runtime()) + ";" + c_template;
      }
      transformed = eval(c_template);
      transformed = oppoize(transformed)[0];
      if (transformed instanceof C.List) {
        transformed.quoted = false;
      }
      return transformed;
    };

    Macro.can_transform = function(item) {
      return (item != null) && (item.transform != null);
    };

    Macro.transform = function(code, levels) {
      var callable, item, transformed;
      if (levels == null) {
        levels = Infinity;
      }
      if (levels > 0) {
        if (code instanceof C.ReturnedConstruct) {
          code = code.value;
        }
        if (code instanceof C.List && !(code.quoted || code.quasiquoted)) {
          callable = code.items[0];
          if (callable instanceof C.Symbol) {
            item = C.get_var_val(callable);
            if (this.can_transform(item)) {
              transformed = item.transform.apply(item, code.items.slice(1));
              levels -= 1;
            }
          }
        }
        if (!transformed && (!(code instanceof C.Macro)) && (this.can_transform(code))) {
          transformed = code.transform();
        }
        if ((transformed != null) && transformed !== code) {
          return this.transform(transformed, levels);
        } else {
          return code;
        }
      } else {
        return code;
      }
    };

    return Macro;

  })(C.Construct);

  C.OppoObject = (function(_super) {

    __extends(OppoObject, _super);

    function OppoObject() {
      OppoObject.__super__.constructor.apply(this, arguments);
    }

    OppoObject.prototype.compile = function() {
      var dynamic, grp, obj, old_pairs, pair, prop, result, set_obj, sym_obj, val, _i, _len, _ref3;
      this.static_pairs = [];
      this.dynamic_pairs = [];
      _ref3 = this.property_value_pairs;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        pair = _ref3[_i];
        prop = pair[0], val = pair[1];
        prop = oppoize(prop)[0];
        val = oppoize(val)[0];
        prop = C.Macro.transform(prop);
        pair = [prop, val];
        if (prop instanceof C.Symbol && (prop.quoted || prop.quasiquoted)) {
          prop.quoted = prop.quasiquoted = false;
          this.static_pairs.push(pair);
        } else if (prop instanceof C.String) {
          this.static_pairs.push(pair);
        } else {
          this.dynamic_pairs.push(pair);
        }
      }
      old_pairs = this.property_value_pairs;
      this.property_value_pairs = this.static_pairs;
      obj = OppoObject.__super__.compile.apply(this, arguments);
      sym_obj = C.Var.gensym("obj");
      set_obj = new C.Var.Set({
        _var: sym_obj,
        value: new C.Raw(obj)
      });
      dynamic = (function() {
        var _j, _len1, _ref4, _ref5, _results;
        _ref4 = this.dynamic_pairs;
        _results = [];
        for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
          _ref5 = _ref4[_j], prop = _ref5[0], val = _ref5[1];
          _results.push(new C.Raw("" + (sym_obj._compile()) + "[" + (prop._compile()) + "] = " + (val._compile())));
        }
        return _results;
      }).call(this);
      grp = new C.CommaGroup([set_obj].concat(__slice.call(dynamic), [sym_obj]), this.yy);
      result = grp._compile();
      this.property_value_pairs = old_pairs;
      return result;
    };

    OppoObject.prototype.compile_quoted = function() {
      var c_pairs, pair, pairs;
      pairs = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = this.property_value_pairs;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          pair = _ref3[_i];
          pair.quoted = true;
          _results.push(pair);
        }
        return _results;
      }).call(this);
      pairs = oppoize(pairs)[0];
      pairs.quoted = true;
      c_pairs = pairs._compile();
      return "new lemur.Compiler.OppoObject(" + c_pairs + ", " + this.line_number + ")";
    };

    return OppoObject;

  })(C.Object);

  define = function(defs) {
    var name, o_val, result, scope, sym, sym_def, sym_js_eval, val, var_stmt;
    sym_js_eval = new C.Symbol("js-eval");
    sym_def = new C.Symbol("def");
    defs = (function() {
      var _i, _len, _ref3, _results;
      _results = [];
      for (_i = 0, _len = defs.length; _i < _len; _i++) {
        _ref3 = defs[_i], name = _ref3[0], val = _ref3[1];
        sym = new C.Symbol(name);
        o_val = new C.Raw("" + val);
        _results.push(new C.List([sym_def, sym, o_val]));
      }
      return _results;
    })();
    result = new C.CodeFragment(defs);
    scope = C.current_scope();
    var_stmt = scope.var_stmt();
    return "" + var_stmt + (result._compile()) + ";";
  };

  compare_op = function(sym) {
    return "function () {\n  var last = arguments[0];\n  for (var i=1, len=arguments.length; i<len; i++) {\n    var current = arguments[i];\n    var result = last " + sym + " current;\n    if (!result) return result;\n    last = current;\n  }\n  return true;\n}";
  };

  binary_op = function(sym, _not) {
    if (_not == null) {
      _not = false;
    }
    return "function () {\n  var last = arguments[0];\n  for (var i=1, len=arguments.length; i<len; i++) {\n    if (" + (_not ? '!' : '') + "last) return last;\n    last = last " + sym + " arguments[i];\n  }\n  return last;\n}";
  };

  math_op = function(sym, explicit_convert) {
    if (explicit_convert == null) {
      explicit_convert = false;
    }
    return "function () {\n  var x = arguments[0];\n  for (var i=1, len=arguments.length; i<len; i++) {\n    x " + sym + "= " + (explicit_convert ? '+' : '') + "arguments[i];\n  }\n  return x;\n}";
  };

  push_unshift_op = function(method) {
    return "function (a) {\n    var args = __slice__.call(arguments, 1);\n    var new_a = a.slice();\n    new_a." + method + ".apply(new_a, args);\n    return new_a;\n}";
  };

  equality_op = function(_not) {
    if (_not == null) {
      _not = false;
    }
    return "function () {\n  var a, b;\n  var i = 0;\n  var len = arguments.length;\n  for (; i < len; i++) {\n    b = arguments[i]\n    if (typeof a === \"undefined\") {\n      a = b;\n      continue;\n    }\n\n    if (!__equal__(a, b))\n      return " + _not + ";\n\n    a = b;\n  }\n  return " + (!_not) + ";\n}";
  };

  compile_runtime = function() {
    return define([
      ['__oppo_runtime_defined__', true], [
        'identity', function(x) {
          return x;
        }
      ], ['+', math_op('+', true)], ['-', math_op('-')], ['*', math_op('*')], ['/', math_op('/')], [
        'mod', function(a, b) {
          return a % b;
        }
      ], ['pow', "Math.pow"], ['min', 'Math.min'], ['max', 'Math.max'], [
        'incr', function(x) {
          return ++x;
        }
      ], [
        'decr', function(x) {
          return --x;
        }
      ], ['<', compare_op('<')], ['>', compare_op('>')], ['<=', compare_op('<=')], ['>=', compare_op('>=')], ['__hasDontEnumBug__', "!propertyIsEnumerable.call({ 'valueOf': 0 }, 'valueOf')"], ['__explicitEnum__', "__hasDontEnumBug__ ? [        'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',        'toLocaleString', 'toString', 'valueOf'      ] : null"], ['__hasOwnProperty__', 'Object.prototype.hasOwnProperty'], [
        '__equal__', function (a, b, stack) {
        stack || (stack = []);

        // exit early for identical values
        if (a === b) {
          // treat '+0' vs. '-0' as not equal
          return a !== 0 || (1 / a == 1 / b);
        }
        // a strict comparison is necessary because 'undefined == null'
        if (a == null || b == null) {
          return a === b;
        }
        // compare [[Class]] names
        var className = __typeof__(a);
        if (className != __typeof__(b)) {
          return false;
        }
        switch (className) {
          // strings, numbers, dates, and booleans are compared by value
          case "string":
            // primitives and their corresponding object instances are equivalent;
            // thus, '5' is quivalent to 'new String('5')'
            return a == String(b);

          case "number":
            // treat 'NaN' vs. 'NaN' as equal
            return a != +a
              ? b != +b
              // but treat '+0' vs. '-0' as not equal
              : (a == 0 ? (1 / a == 1 / b) : a == +b);

          case "boolean":
          case "date":
            // coerce dates and booleans to numeric values, dates to milliseconds and
            // booleans to 1 or 0; treat invalid dates coerced to 'NaN' as not equal
            return +a == +b;

          // regexps are compared by their source and flags
          case "regexp":
            return a.source == b.source &&
                   a.global == b.global &&
                   a.multiline == b.multiline &&
                   a.ignoreCase == b.ignoreCase;
        }
        if (typeof a != 'object' || typeof b != 'object') {
          return false;
        }
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation 'JO'.
        var length = stack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (stack[length] == a) {
            return true;
          }
        }

        var index = -1,
            result = true,
            size = 0;

        // add the first collection to the stack of traversed objects
        stack.push(a);

        // recursively compare objects and arrays
        if (className == "array") {
          // compare array lengths to determine if a deep comparison is necessary
          size = a.length;
          result = size == b.length;

          if (result) {
            // deep compare the contents, ignoring non-numeric properties
            while (size--) {
              if (!(result = __equal__(a[size], b[size], stack))) {
                break;
              }
            }
          }
        }
        else {
          // objects with different constructors are not equivalent
          if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
            return false;
          }
          // deep compare objects.
          for (var prop in a) {
            if (__hasOwnProperty__.call(a, prop)) {
              // count the number of properties.
              size++;
              // deep compare each property value.
              if (!(result = __hasOwnProperty__.call(b, prop) && __equal__(a[prop], b[prop], stack))) {
                break;
              }
            }
          }
          // ensure both objects have the same number of properties
          if (result) {
            for (prop in b) {
              // Adobe's JS engine, embedded in applications like InDesign, has a
              // bug that causes '!size--' to throw an error so it must be wrapped
              // in parentheses.
              // https://github.com/documentcloud/underscore/issues/355
              if (__hasOwnProperty__.call(b, prop) && !(size--)) {
                break;
              }
            }
            result = !size;
          }
          // handle JScript [[DontEnum]] bug
          if (result && __hasDontEnumBug__) {
            while (++index < 7) {
              prop = __explicitEnum__[index];
              if (__hasOwnProperty__.call(a, prop)) {
                if (!(result = __hasOwnProperty__.call(b, prop) && __equal__(a[prop], b[prop], stack))) {
                  break;
                }
              }
            }
          }
        }
        // remove the first collection from the stack of traversed objects
        stack.pop();
        return result;
      }
      ], ['=', equality_op()], ['not=', equality_op(true)], ['or', binary_op('||')], ['and', binary_op('&&', true)], ['__oppo_eval__', 'oppo.eval'], ['__typeof__', 'lemur.core.to_type'], ['typeof', '__typeof__'], ['puts', 'console.log.bind(console)'], ['__slice__', 'Array.prototype.slice'], [
        'list', function() {
          return __slice__.call(arguments);
        }
      ], [
        'first', function(a) {
          return a[0];
        }
      ], [
        'second', function(a) {
          return a[1];
        }
      ], [
        'last', function(a) {
          return a[a.length - 1];
        }
      ], [
        'nth', function(a, n) {
          if (n < 0) {
            n += a.length;
          } else if (n === 0) {
            console.warn("nth treats collections as 1-based instead of 0 based. Don't try to access the 0th element.");
            return null;
          } else {
            n -= 1;
          }
          return a[n];
        }
      ], ['push', push_unshift_op("push")], ['push-right', 'push'], ['push-r', 'push'], ['push-left', push_unshift_op("unshift")], ['push-l', (new C.Symbol('push-left')).compile()], [
        'rest', function(a) {
          return a.slice(1);
        }
      ], [
        'init', function(a) {
          return a.slice(0, a.length - 1);
        }
      ], [
        'concat', function (x) {
      var args = __slice__.call(arguments, 1);
      return x.concat.apply(x, args);
    }
      ], [
        'sort', function(f, a) {
          var new_a;
          new_a = a.slice();
          if (f != null) {
            return new_a.sort(f);
          } else {
            return new_a.sort();
          }
        }
      ], [
        'map', function(f, o) {
          var k, result, t, v, x, _i, _len, _results;
          t = __typeof__(o);
          if (t === "array" || o instanceof Array) {
            _results = [];
            for (_i = 0, _len = o.length; _i < _len; _i++) {
              x = o[_i];
              _results.push(f(x));
            }
            return _results;
          } else if (t === "object" || o instanceof Object) {
            result = {};
            for (k in o) {
              v = o[k];
              if (!o.hasOwnProperty(k)) {
                continue;
              }
              result[k] = f([k, v]);
            }
            return result;
          }
        }
      ], [
        'reduce', function(f, o) {
          var k, result, t, v, x, _i, _len;
          t = __typeof__(o);
          if (t === "array" || o instanceof Array) {
            for (_i = 0, _len = o.length; _i < _len; _i++) {
              x = o[_i];
              if (!(typeof result !== "undefined" && result !== null)) {
                result = x;
                continue;
              }
              result = f(result, x);
            }
          } else if (t === "object" || o instanceof Object) {
            for (k in o) {
              v = o[k];
              if (!o.hasOwnProperty(k)) {
                continue;
              }
              if (!(result != null)) {
                result = v;
                continue;
              }
              result = f(result, v);
            }
          }
          return result;
        }
      ], [
        'reduce-right', function(f, o) {
          var result, t, x, _i, _len, _ref3;
          t = __typeof__(o);
          if (t === "array" || o instanceof Array) {
            _ref3 = o.slice().reverse();
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              x = _ref3[_i];
              if (!(typeof result !== "undefined" && result !== null)) {
                result = x;
                continue;
              }
              result = f(result, x);
            }
            return result;
          } else if (t === "object" || o instanceof Object) {
            return reduce(f, o);
          }
        }
      ], ['reduce-r', (new C.Symbol('reduce-right')).compile()], [
        'filter', function(f, o) {
          var k, result, t, v, x, _i, _len;
          t = __typeof__(o);
          if (t === "array" || o instanceof Array) {
            result = [];
            for (_i = 0, _len = o.length; _i < _len; _i++) {
              x = o[_i];
              if (f(x)) {
                result.push(x);
              }
            }
          } else if (t === "object" || o instanceof Object) {
            result = {};
            for (k in o) {
              v = o[k];
              if (!o.hasOwnProperty(k)) {
                continue;
              }
              if (f([k, v])) {
                result[k] = v;
              }
            }
          }
          return result;
        }
      ], ['clone', "Object.create ? function (o) {\n  return Object.create(o)\n} : function (o) {\n  function Noop() {}\n  Noop.prototype = o;\n  return new Noop();\n}"], [
        'keys', "Object.keys || " + function(o) {
          var k, _results;
          _results = [];
          for (k in o) {
            if (!o.hasOwnProperty(k)) {
              continue;
            }
            _results.push(k);
          }
          return _results;
        }
      ], [
        'values', function(o) {
          var k, t, _i, _len, _ref3, _results;
          t = __typeof__(o);
          if (t === "array" || o instanceof Array) {
            return o.slice();
          } else if (t === "object" || o instanceof Object) {
            _ref3 = keys(o);
            _results = [];
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              k = _ref3[_i];
              _results.push(o[k]);
            }
            return _results;
          }
        }
      ], [
        'merge', function() {
          var base, first, k, o, t, v, _i, _len;
          first = arguments[0];
          t = __typeof__(first);
          if (t === "array") {
            base = [];
          } else if (t === "object") {
            base = {};
          }
          for (_i = 0, _len = arguments.length; _i < _len; _i++) {
            o = arguments[_i];
            for (k in o) {
              v = o[k];
              if (!o.hasOwnProperty(k)) {
                continue;
              }
              base[k] = v;
            }
          }
          return base;
        }
      ], [
        'str', function() {
          var arg, args;
          args = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = arguments.length; _i < _len; _i++) {
              arg = arguments[_i];
              if (typeof arg === "string") {
                _results.push(arg);
              } else if (arg.toString != null) {
                _results.push(arg.toString());
              } else {
                _results.push("" + arg);
              }
            }
            return _results;
          }).apply(this, arguments);
          return args.join('');
        }
      ], [
        'uppercase', function(s) {
          return s.toUpperCase();
        }
      ], [
        'lowercase', function(s) {
          return s.toLowerCase();
        }
      ], [
        'replace', function(s, re, rplc) {
          return s.replace(re, rplc);
        }
      ], [
        'match', function(s, re) {
          return s.match(re);
        }
      ], [
        're-test', function(re, s) {
          return re.test(s);
        }
      ]
    ]);
  };

  /*
  HELPERS
  */


  defmacro = function(name, fn) {
    var m, macro_args, s_name;
    s_name = new C.Symbol(name);
    macro_args = {
      name: s_name
    };
    macro_args.transform = fn;
    m = new C.Macro(macro_args);
    m._compile();
    return m;
  };

  call_macro = function() {
    var args, name, ret, to_call;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    to_call = C.get_var_val(new C.Symbol(name));
    ret = to_call.transform.apply(to_call, args);
    return ret._compile();
  };

  call_macro_transform = function() {
    var args, name, to_call;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    to_call = C.get_var_val(new C.Symbol(name));
    return to_call.transform.apply(to_call, args);
  };

  setup_built_in_macros = function() {
    /*
      JAVASCRIPT BUILTINS
    */

    var macro_do, operator_macro;
    defmacro("regex", function(pattern, modifiers) {
      pattern = C.Macro.transform(pattern);
      modifiers = C.Macro.transform(modifiers);
      return new C.Regex({
        pattern: pattern,
        modifiers: modifiers
      }, pattern.yy);
    });
    defmacro("js-eval", function(js_code) {
      js_code = C.Macro.transform(js_code);
      if (js_code instanceof C.String) {
        return new C.Raw(js_code.value);
      } else if (js_code instanceof C.Number) {
        return new C.Raw(js_code._compile());
      } else if ((js_code instanceof C.Symbol) && js_code.quoted) {
        return new C.Raw(js_code.name);
      } else {
        return new C.Raw("oppo.root.eval(" + (js_code._compile()) + ")");
      }
    });
    defmacro("if", function(cond, tbranch, fbranch) {
      var _if;
      return _if = new C.IfTernary({
        condition: cond,
        then: tbranch,
        _else: fbranch
      });
    });
    defmacro("lambda", function() {
      var args, body, fn;
      args = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return fn = new C.Lambda({
        args: args.value,
        body: body
      });
    });
    defmacro("array", function() {
      var ary, items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return ary = new C.Array(items);
    });
    defmacro("object", function() {
      var kvpairs, obj;
      kvpairs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return obj = new C.OppoObject(kvpairs);
    });
    defmacro("get-prop", function() {
      var c, c_o, c_p, o, p, ps, sym, _i, _len;
      o = arguments[0], ps = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      c_o = o._compile();
      c = "" + c_o;
      for (_i = 0, _len = ps.length; _i < _len; _i++) {
        p = ps[_i];
        p = C.Macro.transform(p);
        sym = p instanceof C.Symbol && (p.quoted || p.quasiquoted);
        if (sym) {
          p.quoted = p.quasiquoted = false;
        }
        c_p = p._compile();
        if (sym) {
          c = "" + c + "." + c_p;
        } else {
          c = "" + c + "[" + c_p + "]";
        }
      }
      return new C.Raw(c);
    });
    defmacro("get-fn", function() {
      var args, fn, o, p, q_p, s_get_prop, s_quote;
      p = arguments[0], o = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      s_get_prop = new C.Symbol("get-prop");
      s_quote = new C.Symbol("quote");
      q_p = new C.List([s_quote, p]);
      fn = new C.List([s_get_prop, o, q_p]);
      return new C.List([fn].concat(__slice.call(args)));
    });
    defmacro("new", function() {
      var args, cls;
      cls = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return new C.FunctionCall({
        fn: cls,
        args: args,
        instantiate: true
      });
    });
    defmacro("js-for", function() {
      var a, b, body, c, _for;
      a = arguments[0], b = arguments[1], c = arguments[2], body = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
      return _for = new C.ForLoop({
        condition: [a, b, c],
        body: body
      });
    });
    defmacro("foreach", function() {
      var body, coll, foreach;
      coll = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return foreach = new C.ForEachLoop({
        collection: coll,
        body: body
      });
    });
    operator_macro = function(name, className) {
      var macro_fn;
      macro_fn = function() {
        var Cls, args, postfix, prefix, results, x, y;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        Cls = C[className];
        prefix = Cls.prototype instanceof C.PrefixOperation;
        postfix = Cls.prototype instanceof C.PostfixOperation;
        results = (function() {
          var _results;
          _results = [];
          while (args.length) {
            x = args.shift();
            _results.push((prefix || postfix ? new Cls(x, x.yy) : (y = args.shift(), new Cls([x, y], x.yy))).compile());
          }
          return _results;
        })();
        return new C.Raw(results.join(' '));
      };
      return defmacro(name, macro_fn);
    };
    operator_macro("subtract", "Subtract");
    operator_macro("add", "Add");
    operator_macro("multiply", "Multiply");
    operator_macro("divide", "Divide");
    operator_macro("modulo", "Mod");
    operator_macro("==", "Eq2");
    operator_macro("===", "Eq3");
    operator_macro("gt", "GT");
    operator_macro("lt", "LT");
    operator_macro("gte", "GTE");
    operator_macro("lte", "LTE");
    operator_macro("not===", "NotEq3");
    operator_macro("not==", "NotEq2");
    operator_macro("!", "Not");
    operator_macro("||", "Or");
    operator_macro("&&", "And");
    operator_macro("&", "BAnd");
    operator_macro("|", "BOr");
    operator_macro("^", "BXor");
    operator_macro("<<", "BLeftShift");
    operator_macro(">>", "BRightShift");
    operator_macro(">>>", "BZeroFillRightShift");
    operator_macro("~", "BNot");
    operator_macro("delete", "Delete");
    /*
      OPPO BUILTINS
    */

    defmacro("keyword", function(keyword) {
      if (keyword instanceof C.Symbol && (keyword.quoted || keyword.quasiquoted)) {
        return new C.String(keyword.value, keyword.yy);
      } else if (keyword instanceof C.String) {
        return keyword;
      } else {
        return new C.Raw("String(" + (keyword._compile()) + ")");
      }
    });
    defmacro("symbol->keyword", function(s) {
      return new C.String(s.value, s.yy);
    });
    defmacro("include", function() {
      var code, expressions, f, files, fname, fragment, fs, include_directory, path, text, _i, _len;
      files = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if ((typeof process !== "undefined" && process !== null ? process.title : void 0) !== 'node') {
        throw new Error("Cannot include file when compiling without file system access.");
      }
      fs = require('fs');
      path = require('path');
      include_directory = C.current_context.include_directory;
      expressions = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        f = files[_i];
        fname = String(eval(f._compile()));
        if ((C.current_context.include_directory != null) && !/^(\/|[a-z]:\\)/i.test(fname)) {
          fname = path.join(C.current_context.include_directory, fname);
        }
        if (C.current_context.cached_includes[fname]) {
          continue;
        } else {
          C.current_context.cached_includes[fname] = true;
        }
        C.current_context.include_directory = path.dirname(fname);
        text = fs.readFileSync(fname, "utf8");
        code = oppo.read(text);
        fragment = new C.CodeFragment(code.s_expression_list);
        expressions.push(fragment._compile());
        C.current_context.include_directory = include_directory;
      }
      return new C.Raw(expressions.join(';\n'));
    });
    defmacro("symbol", function(sym) {
      var c_sym, new_sym;
      if (sym instanceof C.Symbol && (sym.quoted || sym.quasiquoted)) {
        sym.quoted = true;
        return sym;
      } else if (sym instanceof C.String) {
        new_sym = new C.Symbol(sym.value, sym.yy);
        new_sym.quoted = true;
        return new_sym;
      } else {
        c_sym = sym._compile();
        return new C.Raw("new lemur.Compiler.Symbol(" + c_sym + ", " + sym.line_number + ")");
      }
    });
    defmacro("def", function() {
      var args, body, name, rest, scope, set_, to_define, value;
      to_define = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!rest.length) {
        to_define.error("Def", "You must provide a value.");
      }
      scope = C.current_scope();
      if (to_define instanceof C.List) {
        name = to_define.value[0];
        args = to_define.value.slice(1);
        body = rest;
        value = new C.Lambda({
          args: args,
          body: body
        });
      } else if (to_define instanceof C.Symbol) {
        name = to_define;
        value = rest[0];
      } else {
        to_define.error("Def", "Invalid definition.");
      }
      name = new C.Var(name);
      return set_ = new C.Var.Set({
        _var: name,
        value: value
      });
    });
    defmacro("apply", function() {
      var arg, args, c_args, c_callable, callable, last_arg;
      callable = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (args.length > 1) {
        c_args = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            arg = args[_i];
            _results.push(arg._compile());
          }
          return _results;
        })();
        last_arg = c_args.pop();
        c_args = "[" + (c_args.join(', ')) + "].concat(" + last_arg + ")";
        args = [new C.Raw(c_args)];
      }
      args.unshift(new C.Null());
      args = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          arg = args[_i];
          _results.push(arg._compile());
        }
        return _results;
      })();
      c_callable = callable._compile();
      if (!callable instanceof C.Symbol) {
        c_callable = "(c_callable)";
      }
      return new C.Raw("" + c_callable + ".apply(" + (args.join(', ')) + ")");
    });
    defmacro("call", function() {
      var args, callable, fcall, item;
      callable = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (callable instanceof C.Symbol) {
        item = C.get_var_val(callable);
        if (item instanceof C.Macro) {
          if (item.invoke != null) {
            return new C.Raw(item.invoke.apply(item, args));
          } else {
            return item.transform.apply(item, args);
          }
        }
      }
      return fcall = new C.FunctionCall({
        fn: callable,
        args: args
      }, callable.yy);
    });
    defmacro("defmacro", function() {
      var argnames, mac, name, template;
      argnames = arguments[0], template = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      name = argnames.items.shift();
      mac = new C.Macro({
        name: name,
        argnames: argnames,
        template: template
      });
      return new C.Raw(mac.compile());
    });
    defmacro("let", function() {
      var bindings, body, def_sym, i, item, new_bindings, new_body, sym, _i, _len, _ref3;
      bindings = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      def_sym = new C.Symbol('def');
      sym = null;
      new_bindings = [];
      _ref3 = bindings.value;
      for (i = _i = 0, _len = _ref3.length; _i < _len; i = ++_i) {
        item = _ref3[i];
        if (i % 2 === 0) {
          sym = item;
        } else {
          if (!(item != null)) {
            bindings.error("Must have even number of bindings.");
          }
          new_bindings.push(new C.List([def_sym, sym, item]));
        }
      }
      new_body = __slice.call(new_bindings).concat(__slice.call(body));
      return new C.FunctionCall({
        fn: new C.Lambda({
          body: new_body
        }),
        scope: new C.Raw("this")
      });
    });
    macro_do = defmacro("do", function() {
      var items;
      items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return new C.CommaGroup(items, items[0].yy);
    });
    /*
      QUOTING
    */

    defmacro("quote", function(x) {
      x.quoted = true;
      return x;
    });
    defmacro("quasiquote", function(x) {
      x.quasiquoted = true;
      return x;
    });
    defmacro("unquote", function(x) {
      x.unquoted = true;
      return x;
    });
    defmacro("unquote-splicing", function(x) {
      x.unquote_spliced = true;
      return x;
    });
    /*
      ERRORS & VALIDATIONS
    */

    defmacro("raise", function(namespace, error) {
      var c_error, c_namespace;
      if (arguments.length === 1) {
        error = namespace;
        c_namespace = "\"Error\"";
      } else {
        c_namespace = namespace._compile();
      }
      c_error = error._compile();
      return new C.Raw("new oppo.Error(" + c_namespace + ", " + c_error + ").raise()");
    });
    defmacro("try", function() {
      var body, catch_body, catch_err, finally_body, sexp, __, _catch, _finally, _ref3, _ref4, _ref5, _ref6;
      sexp = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _finally = sexp.pop();
      if (!(_finally instanceof C.List) || ((_ref3 = _finally.items[0]) != null ? _ref3.name : void 0) !== "finally") {
        sexp.push(_finally);
        _finally = new C.List([]);
      }
      _catch = sexp.pop();
      if (!(_catch instanceof C.List) || ((_ref4 = _catch.items[0]) != null ? _ref4.name : void 0) !== "catch") {
        sexp.push(_catch);
        _catch = new C.List([]);
      }
      body = sexp;
      _ref5 = _catch.items, __ = _ref5[0], catch_err = _ref5[1], catch_body = 3 <= _ref5.length ? __slice.call(_ref5, 2) : [];
      _ref6 = _finally.items, __ = _ref6[0], finally_body = 2 <= _ref6.length ? __slice.call(_ref6, 1) : [];
      return new C.TryCatchExpression({
        _try: body,
        err_name: catch_err,
        _catch: catch_body,
        _finally: finally_body
      });
    });
    return defmacro("assert", function(sexp) {
      var c_sexp, error, error_namespace, raise_call;
      c_sexp = sexp._compile();
      error_namespace = new C.String("Assertion-Error");
      error = new C.String(oppo.stringify(sexp));
      raise_call = call_macro("raise", error_namespace, error);
      return new C.Raw("(" + c_sexp + " || " + raise_call + ")");
    });
  };

}).call(this);
