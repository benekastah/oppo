// Generated by CoffeeScript 1.3.3
(function() {
  var JavaScriptCode, Symbol, Token, compile, compile_list, define, define_macro, lambda, lookup_symbol, symbol, text_to_js_identifier, to_type, _ref,
    __slice = [].slice;

  Token = oppo.Token;

  Symbol = Token.Symbol;

  _ref = oppo.helpers, text_to_js_identifier = _ref.text_to_js_identifier, to_type = _ref.to_type;

  symbol = function(text) {
    return new Symbol(text);
  };

  oppo.defined_symbols = {};

  lookup_symbol = function(sym, m) {
    var c_sym, new_sym, possible_sym, possible_syms, sym_text, val, _i, _len;
    if (m == null) {
      m = oppo.__compiling_module__;
    }
    new_sym = symbol(sym);
    sym_text = new_sym.token_text;
    possible_syms = [sym_text, "" + m + "::" + new_sym.token_text];
    if (m !== "core") {
      possible_syms.push("core::" + new_sym.token_text);
    }
    for (_i = 0, _len = possible_syms.length; _i < _len; _i++) {
      possible_sym = possible_syms[_i];
      c_sym = compile(symbol(possible_sym))[0];
      val = oppo.defined_symbols[c_sym];
      if (val != null) {
        return val;
      }
    }
  };

  JavaScriptCode = (function() {

    function JavaScriptCode(text) {
      this.text = text;
    }

    return JavaScriptCode;

  })();

  compile = function() {
    var parse_tree, sexp, sexp_type, _i, _len, _results;
    parse_tree = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _results = [];
    for (_i = 0, _len = parse_tree.length; _i < _len; _i++) {
      sexp = parse_tree[_i];
      sexp_type = to_type(sexp);
      if (!(sexp != null)) {
        _results.push("null");
      } else if (sexp instanceof JavaScriptCode) {
        _results.push(sexp.text);
      } else if (sexp instanceof Symbol) {
        _results.push(text_to_js_identifier(sexp.token_text));
      } else if (sexp_type === "boolean" || sexp_type === "number") {
        _results.push("" + sexp);
      } else if (sexp_type === "string") {
        _results.push("\"" + sexp + "\"");
      } else if (sexp_type === "array") {
        _results.push(compile_list(sexp));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  oppo.compile = function(parse_tree, module) {
    var c, last_module;
    if (module == null) {
      module = "core";
    }
    last_module = oppo.__compiling_module__;
    oppo.__compiling_module__ = module;
    c = compile.apply(null, parse_tree);
    oppo.__compiling_module__ = last_module;
    return c.join(";\n");
  };

  compile_list = function(ls) {
    var call_macro, callable;
    callable = ls[0];
    call_macro = lookup_symbol(callable);
    if ((to_type(call_macro)) !== "function") {
      call_macro = lookup_symbol("call", "core");
    } else {
      ls.shift();
    }
    return compile(call_macro.apply(null, ls))[0];
  };

  lambda = function() {
    var args, body, c_args, c_body;
    args = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    c_args = compile.apply(null, args);
    c_body = compile.apply(null, body);
    return new JavaScriptCode("(function (" + (c_args.join(', ')) + ") {\n  return " + (c_body.join(', ')) + ";\n})");
  };

  define = function(_arg) {
    var c_full_name, c_name, c_val, full_name, module, name, value;
    module = _arg.module, name = _arg.name, value = _arg.value;
    if (module == null) {
      module = oppo.__compiling_module__;
    }
    full_name = "" + module + "::" + name;
    c_full_name = compile(symbol(full_name))[0];
    oppo.defined_symbols[c_full_name] = value;
    c_name = compile(symbol(name))[0];
    c_val = compile(value)[0];
    return new JavaScriptCode("" + c_name + " = " + c_val);
  };

  define_macro = function(config) {
    var argnames, module, name, template, template_compile, value;
    module = config.module, name = config.name, argnames = config.argnames, template = config.template;
    template_compile = config.compile;
    if (module == null) {
      module = oppo.__compiling_module__;
    }
    value = template_compile != null ? template_compile : function() {
      return compile([lambda.apply(null, [argnames].concat(__slice.call(template))), args])[0];
    };
    define({
      module: module,
      name: name,
      value: value
    });
    return null;
  };

  define_macro({
    module: "core",
    name: "defmacro",
    compile: function(name, args, template) {
      var t_name;
      t_name = name.token_text;
      return define_macro({
        name: t_name,
        argnames: args,
        template: template
      });
    }
  });

  define_macro({
    module: "core",
    name: "def",
    compile: function(name, value) {
      var t_name;
      t_name = name.token_text;
      return define({
        name: t_name,
        value: value
      });
    }
  });

  define_macro({
    module: "core",
    name: "lambda",
    compile: lambda
  });

  define_macro({
    module: "core",
    name: "call",
    compile: function() {
      var args, c_args, c_fname, fname;
      fname = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      c_fname = compile(fname)[0];
      c_args = compile.apply(null, args);
      return new JavaScriptCode("" + c_fname + "(" + (c_args.join(', ')) + ")");
    }
  });

  define_macro({
    module: "core",
    name: "callmacro",
    compile: function() {
      var args, macro;
      macro = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    }
  });

  define_macro({
    module: "js",
    name: "eval",
    compile: function(to_eval) {
      var type;
      type = type_of(to_eval);
      if (type === "string") {
        return new JavaScriptCode(to_eval);
      } else {
        return [symbol("eval"), (compile(to_eval))[0]];
      }
    }
  });

}).call(this);
