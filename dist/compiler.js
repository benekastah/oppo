// Generated by CoffeeScript 1.3.3
(function() {
  var Context, ContextStack, JavaScriptCode, JavaScriptComment, Macro, Module, OppoCompileError, Symbol, clone, compile, compile_list, compile_symbol, define, define_builtin_macro, define_macro, first_item_matches, get_module, get_symbol_text, is_quoted, is_symbol, lambda, module_splitter, symbol, text_to_js_identifier, to_type, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  JavaScriptCode = oppo.JavaScriptCode, JavaScriptComment = oppo.JavaScriptComment, Symbol = oppo.Symbol;

  _ref = oppo.helpers, text_to_js_identifier = _ref.text_to_js_identifier, to_type = _ref.to_type, clone = _ref.clone;

  symbol = function(text, base_symbol) {
    if (text instanceof Symbol) {
      return text;
    }
    return new Symbol(text, base_symbol);
  };

  get_symbol_text = function(sym) {
    var c_sym;
    if (is_symbol(sym)) {
      c_sym = (compile(sym))[0];
      return c_sym;
    } else if (typeof sym === "string") {
      return get_symbol_text(symbol(sym));
    } else {
      throw new OppoCompileError("Can't get symbol text from non-symbol " + sym, sym);
    }
  };

  module_splitter = null;

  get_module = function(sym) {
    var a_sym, module, s_sym;
    if (module_splitter == null) {
      module_splitter = compile_symbol(symbol('::'));
    }
    s_sym = get_symbol_text(sym);
    a_sym = s_sym.split(module_splitter);
    switch (a_sym.length) {
      case 1:
        s_sym = a_sym[0];
        break;
      case 2:
        module = a_sym[0], s_sym = a_sym[1];
        break;
      default:
        throw new OppoCompileError("Can't define more than one module for symbol " + s_sym, sym);
    }
    return [module, symbol(s_sym, sym)];
  };

  first_item_matches = function(x, sym) {
    var c_sym, fst;
    c_sym = compile_symbol(sym);
    if ((to_type(x)) === "array") {
      fst = x[0];
      if (is_symbol(fst)) {
        return (compile_symbol(fst)) === c_sym;
      } else {
        return false;
      }
    } else {
      return false;
    }
  };

  is_symbol = function(x) {
    return x instanceof Symbol || (first_item_matches(x, "symbol")) || ((to_type(x)) === "array" && (is_quoted(x)) && is_symbol(x[1]));
  };

  is_quoted = function(x) {
    return (x != null ? x.quoted : void 0) || first_item_matches(x, "quote");
  };

  OppoCompileError = (function(_super) {

    __extends(OppoCompileError, _super);

    function OppoCompileError(message, form) {
      this.form = form;
      this.line_number = this.form && this.form.line_number;
      if (this.line_number) {
        message = "at line " + this.line_number + ": " + message;
      }
      this.message = message;
    }

    return OppoCompileError;

  })(Error);

  Macro = (function() {

    function Macro(transform) {
      this.transform = transform;
    }

    return Macro;

  })();

  Context = (function() {

    function Context(parent_context) {
      var _ref1, _ref2;
      this.parent_context = parent_context;
      this.context = clone((_ref1 = (_ref2 = this.parent_context) != null ? _ref2.context : void 0) != null ? _ref1 : Object.prototype);
    }

    Context.prototype.var_stmt = function() {
      var k, v, vars;
      vars = (function() {
        var _ref1, _results;
        _ref1 = this.context;
        _results = [];
        for (k in _ref1) {
          if (!__hasProp.call(_ref1, k)) continue;
          v = _ref1[k];
          if (!(v instanceof Context) && (to_type(v)) !== 'function') {
            _results.push(compile(symbol(k)));
          }
        }
        return _results;
      }).call(this);
      if (vars.length) {
        return "var " + (vars.join(', ')) + ";\n";
      } else {
        return "";
      }
    };

    Context.prototype.lookup = function(sym) {
      var core, result, s_sym;
      s_sym = get_symbol_text(sym);
      result = this.context[s_sym];
      if (result === void 0 && (!(this instanceof Module) || this.name !== "core")) {
        core = Module.get('core');
        result = core.lookup(sym);
      }
      return result;
    };

    Context.prototype.def = function(sym, value) {
      var s_sym;
      s_sym = get_symbol_text(sym);
      if (!(this.context[s_sym] != null)) {
        return this.context[s_sym] = value;
      } else {
        throw new OppoCompileError("Can't define previously defined symbol: " + s_sym, sym);
      }
    };

    Context.prototype.set = function(sym, value) {
      var s_sym;
      s_sym = get_symbol_text(sym);
      if (this.context[s_sym] != null) {
        return this.context[s_sym] = value;
      } else {
        throw new OppoCompileError("Can't set value of undefined symbol: " + s_sym, sym);
      }
    };

    Context.prototype.get = function(sym) {
      var s_sym;
      s_sym = get_symbol_text(sym);
      return this.context[s_sym];
    };

    return Context;

  })();

  Module = (function(_super) {

    __extends(Module, _super);

    function Module(parent_context, name) {
      var glob, _ref1;
      this.name = name;
      Module.set(this.name, this);
      Module.__super__.constructor.call(this, parent_context);
      glob = (_ref1 = oppo.context_stack) != null ? _ref1.global_context : void 0;
      if ((glob != null ? glob[this.name] : void 0) != null) {
        glob[this.name] = this;
      }
    }

    Module.modules = {};

    Module.get = function(name, create) {
      var m;
      m = this.modules[name];
      if (create && !(m != null)) {
        m = new Module(null, name);
      }
      return m;
    };

    Module.set = function(name, module) {
      if (this.modules[name] != null) {
        throw new OppoCompileError("Can't make same module twice: " + name);
      } else {
        return this.modules[name] = module;
      }
    };

    return Module;

  })(Context);

  ContextStack = (function() {

    function ContextStack() {
      var mod, name;
      this.global_context = new Context();
      for (name in Module) {
        if (!__hasProp.call(Module, name)) continue;
        mod = Module[name];
        this.global_context[name] = mod;
      }
      this.stack = [this.global_context];
      this.current_context = this.global_context;
    }

    ContextStack.prototype.push = function(c) {
      this.current_context = c;
      this.stack.push(c);
      return c;
    };

    ContextStack.prototype.push_new = function() {
      var c;
      c = new Context(this.current_context);
      return this.push(c);
    };

    ContextStack.prototype.push_new_module = function(name) {
      var m;
      m = new Module(this.current_context, name);
      return this.push(m);
    };

    ContextStack.prototype.pop = function() {
      var c;
      c = this.stack.pop();
      this.current_context = this.stack[this.stack.length - 1];
      return c;
    };

    return ContextStack;

  })();

  compile = function() {
    var compiled, parse_tree, result, sexp, sexp_type, _i, _len;
    parse_tree = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    compiled = [];
    for (_i = 0, _len = parse_tree.length; _i < _len; _i++) {
      sexp = parse_tree[_i];
      sexp_type = to_type(sexp);
      result = !(sexp != null) || sexp instanceof Macro ? "null" : sexp instanceof JavaScriptComment ? void 0 : sexp instanceof JavaScriptCode ? sexp.text : sexp instanceof Symbol ? compile_symbol(sexp) : sexp_type === "boolean" || sexp_type === "number" ? "" + sexp : sexp_type === "string" ? "\"" + sexp + "\"" : sexp_type === "array" ? compile_list(sexp) : void 0;
      if (result !== void 0) {
        compiled.push(result);
      }
    }
    return compiled;
  };

  oppo.compile = function(parse_tree, module_name) {
    var c, module, var_stmt, _ref1;
    if (module_name == null) {
      module_name = "__anonymous__";
    }
    if ((_ref1 = oppo.context_stack) == null) {
      oppo.context_stack = new ContextStack();
    }
    module = oppo.context_stack.push_new_module(module_name);
    c = compile.apply(null, parse_tree);
    oppo.context_stack.pop();
    var_stmt = module.var_stmt();
    return "(function () {\n" + var_stmt + "\nreturn " + (c.join(",\n")) + ";\n\n})()";
  };

  compile_symbol = function(sym) {
    return text_to_js_identifier((to_type(sym)) === "string" ? sym : sym.text);
  };

  compile_list = function(ls) {
    var call_macro, callable;
    callable = ls[0];
    call_macro = oppo.context_stack.current_context.lookup(callable);
    if (!(call_macro instanceof Macro)) {
      call_macro = Module.get('core').get('call');
    } else {
      ls.shift();
    }
    if (!(call_macro instanceof Macro)) {
      throw new OppoCompileError("Can't call list: " + ls, ls);
    }
    return compile(call_macro.transform.apply(call_macro, ls))[0];
  };

  lambda = function() {
    var args, body, c_args, c_body, context, var_stmt;
    args = arguments[0], body = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    context = oppo.context_stack.push_new();
    c_args = compile.apply(null, args);
    c_body = compile.apply(null, body);
    oppo.context_stack.pop();
    var_stmt = context.var_stmt();
    return new JavaScriptCode("(function (" + (c_args.join(', ')) + ") {\n  " + var_stmt + "return " + (c_body.join(',\n')) + ";\n})");
  };

  define = function() {
    var args, body, c_name, c_val, context, module, name, others, value, _ref1, _ref2;
    name = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if ((to_type(name)) === "array") {
      _ref1 = name, name = _ref1[0], args = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
      body = others;
      return define(name, [symbol('lambda'), args].concat(__slice.call(body)));
    } else {
      value = others[0];
    }
    _ref2 = get_module(name), module = _ref2[0], name = _ref2[1];
    if (module != null) {
      context = Module.get(module, true);
    } else {
      context = oppo.context_stack.current_context;
    }
    context.def(name, value);
    c_name = compile(name)[0];
    c_val = compile(value)[0];
    return new JavaScriptCode("" + c_name + " = " + c_val);
  };

  define_macro = function(name, argnames, template) {
    var template_compile, value;
    template_compile = (to_type(template)) === "function" ? template : void 0;
    value = new Macro(template_compile != null ? template_compile : function() {
      return compile([lambda.apply(null, [argnames].concat(__slice.call(template))), args])[0];
    });
    define(name, value);
    return void 0;
  };

  define_builtin_macro = function(name, template_compile) {
    return define_macro(symbol(name), null, template_compile);
  };

  define_builtin_macro("core::defmacro", function(name, args, template) {
    var t_name;
    t_name = name.text;
    return define_macro(t_name, args, template);
  });

  define_builtin_macro("core::def", define);

  define_builtin_macro("core::lambda", lambda);

  define_builtin_macro("core::call", function() {
    var args, c_args, c_fname, fname;
    fname = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    c_fname = compile(fname)[0];
    c_args = compile.apply(null, args);
    return new JavaScriptCode("" + c_fname + "(" + (c_args.join(', ')) + ")");
  });

  define_builtin_macro("core::object-get-value", function(prop, base) {
    var c_base, c_prop;
    c_prop = (compile(prop))[0];
    c_base = (compile(base))[0];
    return new JavaScriptCode(is_quoted(prop && is_symbol(prop)) ? "" + c_base + "." + c_prop : "" + c_base + "[" + c_prop + "]");
  });

  define_builtin_macro("core::.", function() {
    var args, base, fname;
    fname = arguments[0], base = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    fname = [symbol('quote'), fname];
    return [[symbol('object-get-value'), fname, base]].concat(__slice.call(args));
  });

  define_builtin_macro("js::eval", function(to_eval) {
    var type;
    type = to_type(to_eval);
    if (type === "string") {
      return new JavaScriptCode(to_eval);
    } else {
      return [symbol("eval"), (compile(to_eval))[0]];
    }
  });

}).call(this);
