/*jslint nodejs:true */

function typeCheck(name, expected, value) {
  if (typeof value !== expected) {
    throw new TypeError(
      'Expected argument "' + name + 
      '" to be type "' + expected + 
      '" but got "' + value + '" instead.');
  }
}

function arbBool() {
	return Math.random() > 0.5 ? true : false;
}

exports.arbBool = arbBool;

function arbDouble() {
	var sign = Math.random() > 0.5 ? 1 : -1;
	return sign * Math.random() * Number.MAX_VALUE;
}

exports.arbDouble = arbDouble;

function arbInt() {
	var sign = Math.random() > 0.5 ? 1 : -1;
	return sign * Math.floor(Math.random() * Number.MAX_VALUE);
}

exports.arbInt = arbInt;

function arbByte() {
	return Math.floor(Math.random() * 256);
}

exports.arbByte = arbByte;

function arbChar() {
	return String.fromCharCode(arbByte());
}

exports.arbChar = arbChar;

function arbArray(generator) {
	var
		len = Math.floor(Math.random() * 100),
		array = [],
		i;

  typeCheck("generator", "function", generator);
    
	for (i = 0; i < len; i++) {
		array.push(generator());
	}

	return array;
}

exports.arbArray = arbArray;

function arbString() {
	return arbArray(arbChar).join("");
}

exports.arbString = arbString;

function forAll(property) {
	var
		generators = Array.prototype.slice.call(arguments, 1),
		fn = function (f) { return f(); },
		i,
		values;

	for (i = 0; i < 100; i ++) {
		values = generators.map(fn);

		if (!property.apply(null, values)) {
			console.log("*** Failed!\n" + values);
			return;
		}
	}

	console.log("+++ OK, passed 100 tests.");
	return true;
}

exports.forAll = forAll;

function forAllSilent() {
	console.oldLog = console.log;
	console.log = function () {};

	var result = forAll.apply(null, arguments);

	console.log = console.oldLog;

	return result;
}

exports.forAllSilent = forAllSilent;

// Test quickcheck itself
function test(verbose) {
	var
		propertyEven,
		propertyNumber,
		propertyTrue,
		_forAll;
		
	_forAll = verbose ?
	  function () {
	    console.assert(forAllSilent.apply(null, arguments));
	  } :
	  forAll;
  
	propertyEven = function (x) { return x % 2 === 0; };
	_forAll(propertyEven, arbByte);

	propertyNumber = function (x) { return typeof(x) === "number"; };
	_forAll(propertyNumber, arbInt);

	propertyTrue = function (x) { return x; };
	_forAll(propertyTrue, arbBool);

	return true;
}

exports.test = test;